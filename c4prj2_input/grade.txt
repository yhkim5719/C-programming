Grading at Sat Aug  3 07:41:50 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==5293== Memcheck, a memory error detector
==5293== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==5293== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==5293== Command: ./tester h.txt d.txt
==5293== Parent PID: 5292
==5293== 
==5293== Use of uninitialised value of size 8
==5293==    at 0x401046: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==5293==    by 0x401D8C: main (test-input.c:81)
==5293== 
==5293== Invalid write of size 4
==5293==    at 0x401046: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==5293==    by 0x401D8C: main (test-input.c:81)
==5293==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==5293== 
==5293== 
==5293== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==5293==  Access not within mapped region at address 0x0
==5293==    at 0x401046: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==5293==    by 0x401D8C: main (test-input.c:81)
==5293==  If you believe this happened as a result of a stack
==5293==  overflow in your program's main thread (unlikely but
==5293==  possible), you can try to increase the size of the
==5293==  main thread stack using the --main-stacksize= flag.
==5293==  The main thread stack size used in this run was 8388608.
==5293== 
==5293== HEAP SUMMARY:
==5293==     in use at exit: 1,056 bytes in 71 blocks
==5293==   total heap usage: 123 allocs, 52 frees, 15,744 bytes allocated
==5293== 
==5293== LEAK SUMMARY:
==5293==    definitely lost: 0 bytes in 0 blocks
==5293==    indirectly lost: 0 bytes in 0 blocks
==5293==      possibly lost: 0 bytes in 0 blocks
==5293==    still reachable: 1,056 bytes in 71 blocks
==5293==         suppressed: 0 bytes in 0 blocks
==5293== Rerun with --leak-check=full to see details of leaked memory
==5293== 
==5293== For counts of detected and suppressed errors, rerun with: -v
==5293== Use --track-origins=yes to see where uninitialised values come from
==5293== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==5299== Memcheck, a memory error detector
==5299== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==5299== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==5299== Command: ./tester i1 i2
==5299== Parent PID: 5298
==5299== 
==5299== Use of uninitialised value of size 8
==5299==    at 0x401046: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==5299==    by 0x401D8C: main (test-input.c:81)
==5299== 
==5299== Invalid write of size 4
==5299==    at 0x401046: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==5299==    by 0x401D8C: main (test-input.c:81)
==5299==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==5299== 
==5299== 
==5299== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==5299==  Access not within mapped region at address 0x0
==5299==    at 0x401046: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==5299==    by 0x401D8C: main (test-input.c:81)
==5299==  If you believe this happened as a result of a stack
==5299==  overflow in your program's main thread (unlikely but
==5299==  possible), you can try to increase the size of the
==5299==  main thread stack using the --main-stacksize= flag.
==5299==  The main thread stack size used in this run was 8388608.
==5299== 
==5299== HEAP SUMMARY:
==5299==     in use at exit: 3,000 bytes in 182 blocks
==5299==   total heap usage: 329 allocs, 147 frees, 22,600 bytes allocated
==5299== 
==5299== LEAK SUMMARY:
==5299==    definitely lost: 0 bytes in 0 blocks
==5299==    indirectly lost: 0 bytes in 0 blocks
==5299==      possibly lost: 0 bytes in 0 blocks
==5299==    still reachable: 3,000 bytes in 182 blocks
==5299==         suppressed: 0 bytes in 0 blocks
==5299== Rerun with --leak-check=full to see details of leaked memory
==5299== 
==5299== For counts of detected and suppressed errors, rerun with: -v
==5299== Use --track-origins=yes to see where uninitialised values come from
==5299== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: C
