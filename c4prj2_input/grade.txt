Grading at Sat Aug  3 00:03:43 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==5365== Memcheck, a memory error detector
==5365== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==5365== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==5365== Command: ./tester h.txt d.txt
==5365== Parent PID: 5364
==5365== 
==5365== Invalid write of size 1
==5365==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==5365==    by 0x400D64: read_input (in /graderhome/work/c4prj2_input/tester)
==5365==    by 0x401CE6: main (test-input.c:69)
==5365==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==5365== 
==5365== 
==5365== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==5365==  Access not within mapped region at address 0x0
==5365==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==5365==    by 0x400D64: read_input (in /graderhome/work/c4prj2_input/tester)
==5365==    by 0x401CE6: main (test-input.c:69)
==5365==  If you believe this happened as a result of a stack
==5365==  overflow in your program's main thread (unlikely but
==5365==  possible), you can try to increase the size of the
==5365==  main thread stack using the --main-stacksize= flag.
==5365==  The main thread stack size used in this run was 8388608.
==5365== 
==5365== HEAP SUMMARY:
==5365==     in use at exit: 792 bytes in 11 blocks
==5365==   total heap usage: 17 allocs, 6 frees, 5,008 bytes allocated
==5365== 
==5365== LEAK SUMMARY:
==5365==    definitely lost: 0 bytes in 0 blocks
==5365==    indirectly lost: 0 bytes in 0 blocks
==5365==      possibly lost: 0 bytes in 0 blocks
==5365==    still reachable: 792 bytes in 11 blocks
==5365==         suppressed: 0 bytes in 0 blocks
==5365== Rerun with --leak-check=full to see details of leaked memory
==5365== 
==5365== For counts of detected and suppressed errors, rerun with: -v
==5365== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==5371== Memcheck, a memory error detector
==5371== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==5371== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==5371== Command: ./tester i1 i2
==5371== Parent PID: 5370
==5371== 
==5371== Invalid write of size 1
==5371==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==5371==    by 0x400D64: read_input (in /graderhome/work/c4prj2_input/tester)
==5371==    by 0x401CE6: main (test-input.c:69)
==5371==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==5371== 
==5371== 
==5371== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==5371==  Access not within mapped region at address 0x0
==5371==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==5371==    by 0x400D64: read_input (in /graderhome/work/c4prj2_input/tester)
==5371==    by 0x401CE6: main (test-input.c:69)
==5371==  If you believe this happened as a result of a stack
==5371==  overflow in your program's main thread (unlikely but
==5371==  possible), you can try to increase the size of the
==5371==  main thread stack using the --main-stacksize= flag.
==5371==  The main thread stack size used in this run was 8388608.
==5371== 
==5371== HEAP SUMMARY:
==5371==     in use at exit: 744 bytes in 8 blocks
==5371==   total heap usage: 11 allocs, 3 frees, 4,864 bytes allocated
==5371== 
==5371== LEAK SUMMARY:
==5371==    definitely lost: 0 bytes in 0 blocks
==5371==    indirectly lost: 0 bytes in 0 blocks
==5371==      possibly lost: 0 bytes in 0 blocks
==5371==    still reachable: 744 bytes in 8 blocks
==5371==         suppressed: 0 bytes in 0 blocks
==5371== Rerun with --leak-check=full to see details of leaked memory
==5371== 
==5371== For counts of detected and suppressed errors, rerun with: -v
==5371== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: C
