Grading at Sat Aug  3 01:35:38 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==11808== Memcheck, a memory error detector
==11808== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==11808== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==11808== Command: ./tester h.txt d.txt
==11808== Parent PID: 11807
==11808== 
==11808== Invalid write of size 1
==11808==    at 0x400BDA: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==11808==    by 0x400DA9: read_input (in /graderhome/work/c4prj2_input/tester)
==11808==    by 0x401D06: main (test-input.c:69)
==11808==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==11808== 
==11808== 
==11808== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==11808==  Access not within mapped region at address 0x0
==11808==    at 0x400BDA: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==11808==    by 0x400DA9: read_input (in /graderhome/work/c4prj2_input/tester)
==11808==    by 0x401D06: main (test-input.c:69)
==11808==  If you believe this happened as a result of a stack
==11808==  overflow in your program's main thread (unlikely but
==11808==  possible), you can try to increase the size of the
==11808==  main thread stack using the --main-stacksize= flag.
==11808==  The main thread stack size used in this run was 8388608.
==11808== 
==11808== HEAP SUMMARY:
==11808==     in use at exit: 792 bytes in 11 blocks
==11808==   total heap usage: 17 allocs, 6 frees, 5,008 bytes allocated
==11808== 
==11808== LEAK SUMMARY:
==11808==    definitely lost: 0 bytes in 0 blocks
==11808==    indirectly lost: 0 bytes in 0 blocks
==11808==      possibly lost: 0 bytes in 0 blocks
==11808==    still reachable: 792 bytes in 11 blocks
==11808==         suppressed: 0 bytes in 0 blocks
==11808== Rerun with --leak-check=full to see details of leaked memory
==11808== 
==11808== For counts of detected and suppressed errors, rerun with: -v
==11808== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==11814== Memcheck, a memory error detector
==11814== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==11814== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==11814== Command: ./tester i1 i2
==11814== Parent PID: 11813
==11814== 
==11814== Invalid write of size 1
==11814==    at 0x400BDA: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==11814==    by 0x400DA9: read_input (in /graderhome/work/c4prj2_input/tester)
==11814==    by 0x401D06: main (test-input.c:69)
==11814==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==11814== 
==11814== 
==11814== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==11814==  Access not within mapped region at address 0x0
==11814==    at 0x400BDA: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==11814==    by 0x400DA9: read_input (in /graderhome/work/c4prj2_input/tester)
==11814==    by 0x401D06: main (test-input.c:69)
==11814==  If you believe this happened as a result of a stack
==11814==  overflow in your program's main thread (unlikely but
==11814==  possible), you can try to increase the size of the
==11814==  main thread stack using the --main-stacksize= flag.
==11814==  The main thread stack size used in this run was 8388608.
==11814== 
==11814== HEAP SUMMARY:
==11814==     in use at exit: 744 bytes in 8 blocks
==11814==   total heap usage: 11 allocs, 3 frees, 4,864 bytes allocated
==11814== 
==11814== LEAK SUMMARY:
==11814==    definitely lost: 0 bytes in 0 blocks
==11814==    indirectly lost: 0 bytes in 0 blocks
==11814==      possibly lost: 0 bytes in 0 blocks
==11814==    still reachable: 744 bytes in 8 blocks
==11814==         suppressed: 0 bytes in 0 blocks
==11814== Rerun with --leak-check=full to see details of leaked memory
==11814== 
==11814== For counts of detected and suppressed errors, rerun with: -v
==11814== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: C
