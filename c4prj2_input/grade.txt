Grading at Sat Aug  3 00:40:58 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==7575== Memcheck, a memory error detector
==7575== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==7575== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==7575== Command: ./tester h.txt d.txt
==7575== Parent PID: 7574
==7575== 
==7575== Invalid write of size 1
==7575==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==7575==    by 0x400D64: read_input (in /graderhome/work/c4prj2_input/tester)
==7575==    by 0x401CE6: main (test-input.c:69)
==7575==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==7575== 
==7575== 
==7575== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==7575==  Access not within mapped region at address 0x0
==7575==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==7575==    by 0x400D64: read_input (in /graderhome/work/c4prj2_input/tester)
==7575==    by 0x401CE6: main (test-input.c:69)
==7575==  If you believe this happened as a result of a stack
==7575==  overflow in your program's main thread (unlikely but
==7575==  possible), you can try to increase the size of the
==7575==  main thread stack using the --main-stacksize= flag.
==7575==  The main thread stack size used in this run was 8388608.
==7575== 
==7575== HEAP SUMMARY:
==7575==     in use at exit: 792 bytes in 11 blocks
==7575==   total heap usage: 17 allocs, 6 frees, 5,008 bytes allocated
==7575== 
==7575== LEAK SUMMARY:
==7575==    definitely lost: 0 bytes in 0 blocks
==7575==    indirectly lost: 0 bytes in 0 blocks
==7575==      possibly lost: 0 bytes in 0 blocks
==7575==    still reachable: 792 bytes in 11 blocks
==7575==         suppressed: 0 bytes in 0 blocks
==7575== Rerun with --leak-check=full to see details of leaked memory
==7575== 
==7575== For counts of detected and suppressed errors, rerun with: -v
==7575== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==7581== Memcheck, a memory error detector
==7581== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==7581== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==7581== Command: ./tester i1 i2
==7581== Parent PID: 7580
==7581== 
==7581== Invalid write of size 1
==7581==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==7581==    by 0x400D64: read_input (in /graderhome/work/c4prj2_input/tester)
==7581==    by 0x401CE6: main (test-input.c:69)
==7581==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==7581== 
==7581== 
==7581== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==7581==  Access not within mapped region at address 0x0
==7581==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==7581==    by 0x400D64: read_input (in /graderhome/work/c4prj2_input/tester)
==7581==    by 0x401CE6: main (test-input.c:69)
==7581==  If you believe this happened as a result of a stack
==7581==  overflow in your program's main thread (unlikely but
==7581==  possible), you can try to increase the size of the
==7581==  main thread stack using the --main-stacksize= flag.
==7581==  The main thread stack size used in this run was 8388608.
==7581== 
==7581== HEAP SUMMARY:
==7581==     in use at exit: 744 bytes in 8 blocks
==7581==   total heap usage: 11 allocs, 3 frees, 4,864 bytes allocated
==7581== 
==7581== LEAK SUMMARY:
==7581==    definitely lost: 0 bytes in 0 blocks
==7581==    indirectly lost: 0 bytes in 0 blocks
==7581==      possibly lost: 0 bytes in 0 blocks
==7581==    still reachable: 744 bytes in 8 blocks
==7581==         suppressed: 0 bytes in 0 blocks
==7581== Rerun with --leak-check=full to see details of leaked memory
==7581== 
==7581== For counts of detected and suppressed errors, rerun with: -v
==7581== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: C
