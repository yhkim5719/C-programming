Grading at Fri Aug  2 23:57:16 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==5041== Memcheck, a memory error detector
==5041== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==5041== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==5041== Command: ./tester h.txt d.txt
==5041== Parent PID: 5040
==5041== 
==5041== Invalid write of size 1
==5041==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==5041==    by 0x400D64: read_input (in /graderhome/work/c4prj2_input/tester)
==5041==    by 0x401CDD: main (test-input.c:69)
==5041==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==5041== 
==5041== 
==5041== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==5041==  Access not within mapped region at address 0x0
==5041==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==5041==    by 0x400D64: read_input (in /graderhome/work/c4prj2_input/tester)
==5041==    by 0x401CDD: main (test-input.c:69)
==5041==  If you believe this happened as a result of a stack
==5041==  overflow in your program's main thread (unlikely but
==5041==  possible), you can try to increase the size of the
==5041==  main thread stack using the --main-stacksize= flag.
==5041==  The main thread stack size used in this run was 8388608.
==5041== 
==5041== HEAP SUMMARY:
==5041==     in use at exit: 792 bytes in 11 blocks
==5041==   total heap usage: 17 allocs, 6 frees, 5,008 bytes allocated
==5041== 
==5041== LEAK SUMMARY:
==5041==    definitely lost: 0 bytes in 0 blocks
==5041==    indirectly lost: 0 bytes in 0 blocks
==5041==      possibly lost: 0 bytes in 0 blocks
==5041==    still reachable: 792 bytes in 11 blocks
==5041==         suppressed: 0 bytes in 0 blocks
==5041== Rerun with --leak-check=full to see details of leaked memory
==5041== 
==5041== For counts of detected and suppressed errors, rerun with: -v
==5041== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==5047== Memcheck, a memory error detector
==5047== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==5047== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==5047== Command: ./tester i1 i2
==5047== Parent PID: 5046
==5047== 
==5047== Invalid write of size 1
==5047==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==5047==    by 0x400D64: read_input (in /graderhome/work/c4prj2_input/tester)
==5047==    by 0x401CDD: main (test-input.c:69)
==5047==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==5047== 
==5047== 
==5047== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==5047==  Access not within mapped region at address 0x0
==5047==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==5047==    by 0x400D64: read_input (in /graderhome/work/c4prj2_input/tester)
==5047==    by 0x401CDD: main (test-input.c:69)
==5047==  If you believe this happened as a result of a stack
==5047==  overflow in your program's main thread (unlikely but
==5047==  possible), you can try to increase the size of the
==5047==  main thread stack using the --main-stacksize= flag.
==5047==  The main thread stack size used in this run was 8388608.
==5047== 
==5047== HEAP SUMMARY:
==5047==     in use at exit: 744 bytes in 8 blocks
==5047==   total heap usage: 11 allocs, 3 frees, 4,864 bytes allocated
==5047== 
==5047== LEAK SUMMARY:
==5047==    definitely lost: 0 bytes in 0 blocks
==5047==    indirectly lost: 0 bytes in 0 blocks
==5047==      possibly lost: 0 bytes in 0 blocks
==5047==    still reachable: 744 bytes in 8 blocks
==5047==         suppressed: 0 bytes in 0 blocks
==5047== Rerun with --leak-check=full to see details of leaked memory
==5047== 
==5047== For counts of detected and suppressed errors, rerun with: -v
==5047== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: C
