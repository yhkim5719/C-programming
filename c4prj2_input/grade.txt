Grading at Sat Aug  3 00:15:39 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==6133== Memcheck, a memory error detector
==6133== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==6133== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==6133== Command: ./tester h.txt d.txt
==6133== Parent PID: 6132
==6133== 
==6133== Invalid write of size 1
==6133==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==6133==    by 0x400D71: read_input (in /graderhome/work/c4prj2_input/tester)
==6133==    by 0x401CEE: main (test-input.c:69)
==6133==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==6133== 
==6133== 
==6133== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==6133==  Access not within mapped region at address 0x0
==6133==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==6133==    by 0x400D71: read_input (in /graderhome/work/c4prj2_input/tester)
==6133==    by 0x401CEE: main (test-input.c:69)
==6133==  If you believe this happened as a result of a stack
==6133==  overflow in your program's main thread (unlikely but
==6133==  possible), you can try to increase the size of the
==6133==  main thread stack using the --main-stacksize= flag.
==6133==  The main thread stack size used in this run was 8388608.
==6133== 
==6133== HEAP SUMMARY:
==6133==     in use at exit: 792 bytes in 11 blocks
==6133==   total heap usage: 17 allocs, 6 frees, 5,008 bytes allocated
==6133== 
==6133== LEAK SUMMARY:
==6133==    definitely lost: 0 bytes in 0 blocks
==6133==    indirectly lost: 0 bytes in 0 blocks
==6133==      possibly lost: 0 bytes in 0 blocks
==6133==    still reachable: 792 bytes in 11 blocks
==6133==         suppressed: 0 bytes in 0 blocks
==6133== Rerun with --leak-check=full to see details of leaked memory
==6133== 
==6133== For counts of detected and suppressed errors, rerun with: -v
==6133== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==6139== Memcheck, a memory error detector
==6139== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==6139== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==6139== Command: ./tester i1 i2
==6139== Parent PID: 6138
==6139== 
==6139== Invalid write of size 1
==6139==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==6139==    by 0x400D71: read_input (in /graderhome/work/c4prj2_input/tester)
==6139==    by 0x401CEE: main (test-input.c:69)
==6139==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==6139== 
==6139== 
==6139== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==6139==  Access not within mapped region at address 0x0
==6139==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==6139==    by 0x400D71: read_input (in /graderhome/work/c4prj2_input/tester)
==6139==    by 0x401CEE: main (test-input.c:69)
==6139==  If you believe this happened as a result of a stack
==6139==  overflow in your program's main thread (unlikely but
==6139==  possible), you can try to increase the size of the
==6139==  main thread stack using the --main-stacksize= flag.
==6139==  The main thread stack size used in this run was 8388608.
==6139== 
==6139== HEAP SUMMARY:
==6139==     in use at exit: 744 bytes in 8 blocks
==6139==   total heap usage: 11 allocs, 3 frees, 4,864 bytes allocated
==6139== 
==6139== LEAK SUMMARY:
==6139==    definitely lost: 0 bytes in 0 blocks
==6139==    indirectly lost: 0 bytes in 0 blocks
==6139==      possibly lost: 0 bytes in 0 blocks
==6139==    still reachable: 744 bytes in 8 blocks
==6139==         suppressed: 0 bytes in 0 blocks
==6139== Rerun with --leak-check=full to see details of leaked memory
==6139== 
==6139== For counts of detected and suppressed errors, rerun with: -v
==6139== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: C
