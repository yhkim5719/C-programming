Grading at Fri Aug  2 23:49:28 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file did not match the expected ouput
Test case failed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==4549== Memcheck, a memory error detector
==4549== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4549== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4549== Command: ./tester hands.txt draw.txt
==4549== Parent PID: 4548
==4549== 
==4549== Conditional jump or move depends on uninitialised value(s)
==4549==    at 0x4C2FD15: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==4549==    by 0x400D54: read_input (in /graderhome/work/c4prj2_input/tester)
==4549==    by 0x401CCD: main (test-input.c:69)
==4549== 
==4549== Use of uninitialised value of size 8
==4549==    at 0x400D83: read_input (in /graderhome/work/c4prj2_input/tester)
==4549==    by 0x401CCD: main (test-input.c:69)
==4549== 
==4549== 
==4549== HEAP SUMMARY:
==4549==     in use at exit: 512 bytes in 36 blocks
==4549==   total heap usage: 75 allocs, 39 frees, 14,888 bytes allocated
==4549== 
==4549== LEAK SUMMARY:
==4549==    definitely lost: 64 bytes in 4 blocks
==4549==    indirectly lost: 448 bytes in 32 blocks
==4549==      possibly lost: 0 bytes in 0 blocks
==4549==    still reachable: 0 bytes in 0 blocks
==4549==         suppressed: 0 bytes in 0 blocks
==4549== Rerun with --leak-check=full to see details of leaked memory
==4549== 
==4549== For counts of detected and suppressed errors, rerun with: -v
==4549== Use --track-origins=yes to see where uninitialised values come from
==4549== ERROR SUMMARY: 6 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==4555== Memcheck, a memory error detector
==4555== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4555== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4555== Command: ./tester h.txt d.txt
==4555== Parent PID: 4554
==4555== 
==4555== Invalid write of size 1
==4555==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==4555==    by 0x400D82: read_input (in /graderhome/work/c4prj2_input/tester)
==4555==    by 0x401CCD: main (test-input.c:69)
==4555==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==4555== 
==4555== 
==4555== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4555==  Access not within mapped region at address 0x0
==4555==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==4555==    by 0x400D82: read_input (in /graderhome/work/c4prj2_input/tester)
==4555==    by 0x401CCD: main (test-input.c:69)
==4555==  If you believe this happened as a result of a stack
==4555==  overflow in your program's main thread (unlikely but
==4555==  possible), you can try to increase the size of the
==4555==  main thread stack using the --main-stacksize= flag.
==4555==  The main thread stack size used in this run was 8388608.
==4555== 
==4555== HEAP SUMMARY:
==4555==     in use at exit: 792 bytes in 11 blocks
==4555==   total heap usage: 17 allocs, 6 frees, 5,008 bytes allocated
==4555== 
==4555== LEAK SUMMARY:
==4555==    definitely lost: 0 bytes in 0 blocks
==4555==    indirectly lost: 0 bytes in 0 blocks
==4555==      possibly lost: 0 bytes in 0 blocks
==4555==    still reachable: 792 bytes in 11 blocks
==4555==         suppressed: 0 bytes in 0 blocks
==4555== Rerun with --leak-check=full to see details of leaked memory
==4555== 
==4555== For counts of detected and suppressed errors, rerun with: -v
==4555== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==4561== Memcheck, a memory error detector
==4561== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4561== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4561== Command: ./tester i1 i2
==4561== Parent PID: 4560
==4561== 
==4561== Invalid write of size 1
==4561==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==4561==    by 0x400D82: read_input (in /graderhome/work/c4prj2_input/tester)
==4561==    by 0x401CCD: main (test-input.c:69)
==4561==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==4561== 
==4561== 
==4561== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4561==  Access not within mapped region at address 0x0
==4561==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==4561==    by 0x400D82: read_input (in /graderhome/work/c4prj2_input/tester)
==4561==    by 0x401CCD: main (test-input.c:69)
==4561==  If you believe this happened as a result of a stack
==4561==  overflow in your program's main thread (unlikely but
==4561==  possible), you can try to increase the size of the
==4561==  main thread stack using the --main-stacksize= flag.
==4561==  The main thread stack size used in this run was 8388608.
==4561== 
==4561== HEAP SUMMARY:
==4561==     in use at exit: 744 bytes in 8 blocks
==4561==   total heap usage: 11 allocs, 3 frees, 4,864 bytes allocated
==4561== 
==4561== LEAK SUMMARY:
==4561==    definitely lost: 0 bytes in 0 blocks
==4561==    indirectly lost: 0 bytes in 0 blocks
==4561==      possibly lost: 0 bytes in 0 blocks
==4561==    still reachable: 744 bytes in 8 blocks
==4561==         suppressed: 0 bytes in 0 blocks
==4561== Rerun with --leak-check=full to see details of leaked memory
==4561== 
==4561== For counts of detected and suppressed errors, rerun with: -v
==4561== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: F
