Grading at Sat Aug  3 00:30:36 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==7237== Memcheck, a memory error detector
==7237== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==7237== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==7237== Command: ./tester h.txt d.txt
==7237== Parent PID: 7236
==7237== 
==7237== Invalid write of size 1
==7237==    at 0x400BF7: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==7237==    by 0x400DAA: read_input (in /graderhome/work/c4prj2_input/tester)
==7237==    by 0x401D27: main (test-input.c:69)
==7237==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==7237== 
==7237== 
==7237== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==7237==  Access not within mapped region at address 0x0
==7237==    at 0x400BF7: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==7237==    by 0x400DAA: read_input (in /graderhome/work/c4prj2_input/tester)
==7237==    by 0x401D27: main (test-input.c:69)
==7237==  If you believe this happened as a result of a stack
==7237==  overflow in your program's main thread (unlikely but
==7237==  possible), you can try to increase the size of the
==7237==  main thread stack using the --main-stacksize= flag.
==7237==  The main thread stack size used in this run was 8388608.
==7237== 
==7237== HEAP SUMMARY:
==7237==     in use at exit: 792 bytes in 11 blocks
==7237==   total heap usage: 17 allocs, 6 frees, 5,008 bytes allocated
==7237== 
==7237== LEAK SUMMARY:
==7237==    definitely lost: 0 bytes in 0 blocks
==7237==    indirectly lost: 0 bytes in 0 blocks
==7237==      possibly lost: 0 bytes in 0 blocks
==7237==    still reachable: 792 bytes in 11 blocks
==7237==         suppressed: 0 bytes in 0 blocks
==7237== Rerun with --leak-check=full to see details of leaked memory
==7237== 
==7237== For counts of detected and suppressed errors, rerun with: -v
==7237== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==7243== Memcheck, a memory error detector
==7243== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==7243== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==7243== Command: ./tester i1 i2
==7243== Parent PID: 7242
==7243== 
==7243== Invalid write of size 1
==7243==    at 0x400BF7: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==7243==    by 0x400DAA: read_input (in /graderhome/work/c4prj2_input/tester)
==7243==    by 0x401D27: main (test-input.c:69)
==7243==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==7243== 
==7243== 
==7243== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==7243==  Access not within mapped region at address 0x0
==7243==    at 0x400BF7: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==7243==    by 0x400DAA: read_input (in /graderhome/work/c4prj2_input/tester)
==7243==    by 0x401D27: main (test-input.c:69)
==7243==  If you believe this happened as a result of a stack
==7243==  overflow in your program's main thread (unlikely but
==7243==  possible), you can try to increase the size of the
==7243==  main thread stack using the --main-stacksize= flag.
==7243==  The main thread stack size used in this run was 8388608.
==7243== 
==7243== HEAP SUMMARY:
==7243==     in use at exit: 744 bytes in 8 blocks
==7243==   total heap usage: 11 allocs, 3 frees, 4,864 bytes allocated
==7243== 
==7243== LEAK SUMMARY:
==7243==    definitely lost: 0 bytes in 0 blocks
==7243==    indirectly lost: 0 bytes in 0 blocks
==7243==      possibly lost: 0 bytes in 0 blocks
==7243==    still reachable: 744 bytes in 8 blocks
==7243==         suppressed: 0 bytes in 0 blocks
==7243== Rerun with --leak-check=full to see details of leaked memory
==7243== 
==7243== For counts of detected and suppressed errors, rerun with: -v
==7243== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: C
