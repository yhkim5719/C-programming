Grading at Fri Aug  2 23:47:43 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==4400== Memcheck, a memory error detector
==4400== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4400== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4400== Command: ./tester h.txt d.txt
==4400== Parent PID: 4399
==4400== 
==4400== Invalid write of size 1
==4400==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==4400==    by 0x400D79: read_input (in /graderhome/work/c4prj2_input/tester)
==4400==    by 0x401CCF: main (test-input.c:69)
==4400==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==4400== 
==4400== 
==4400== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4400==  Access not within mapped region at address 0x0
==4400==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==4400==    by 0x400D79: read_input (in /graderhome/work/c4prj2_input/tester)
==4400==    by 0x401CCF: main (test-input.c:69)
==4400==  If you believe this happened as a result of a stack
==4400==  overflow in your program's main thread (unlikely but
==4400==  possible), you can try to increase the size of the
==4400==  main thread stack using the --main-stacksize= flag.
==4400==  The main thread stack size used in this run was 8388608.
==4400== 
==4400== HEAP SUMMARY:
==4400==     in use at exit: 792 bytes in 11 blocks
==4400==   total heap usage: 17 allocs, 6 frees, 5,008 bytes allocated
==4400== 
==4400== LEAK SUMMARY:
==4400==    definitely lost: 0 bytes in 0 blocks
==4400==    indirectly lost: 0 bytes in 0 blocks
==4400==      possibly lost: 0 bytes in 0 blocks
==4400==    still reachable: 792 bytes in 11 blocks
==4400==         suppressed: 0 bytes in 0 blocks
==4400== Rerun with --leak-check=full to see details of leaked memory
==4400== 
==4400== For counts of detected and suppressed errors, rerun with: -v
==4400== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==4406== Memcheck, a memory error detector
==4406== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4406== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4406== Command: ./tester i1 i2
==4406== Parent PID: 4405
==4406== 
==4406== Invalid write of size 1
==4406==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==4406==    by 0x400D79: read_input (in /graderhome/work/c4prj2_input/tester)
==4406==    by 0x401CCF: main (test-input.c:69)
==4406==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==4406== 
==4406== 
==4406== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4406==  Access not within mapped region at address 0x0
==4406==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==4406==    by 0x400D79: read_input (in /graderhome/work/c4prj2_input/tester)
==4406==    by 0x401CCF: main (test-input.c:69)
==4406==  If you believe this happened as a result of a stack
==4406==  overflow in your program's main thread (unlikely but
==4406==  possible), you can try to increase the size of the
==4406==  main thread stack using the --main-stacksize= flag.
==4406==  The main thread stack size used in this run was 8388608.
==4406== 
==4406== HEAP SUMMARY:
==4406==     in use at exit: 744 bytes in 8 blocks
==4406==   total heap usage: 11 allocs, 3 frees, 4,864 bytes allocated
==4406== 
==4406== LEAK SUMMARY:
==4406==    definitely lost: 0 bytes in 0 blocks
==4406==    indirectly lost: 0 bytes in 0 blocks
==4406==      possibly lost: 0 bytes in 0 blocks
==4406==    still reachable: 744 bytes in 8 blocks
==4406==         suppressed: 0 bytes in 0 blocks
==4406== Rerun with --leak-check=full to see details of leaked memory
==4406== 
==4406== For counts of detected and suppressed errors, rerun with: -v
==4406== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: C
