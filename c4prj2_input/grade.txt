Grading at Fri Aug  2 23:53:10 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==4879== Memcheck, a memory error detector
==4879== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4879== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4879== Command: ./tester h.txt d.txt
==4879== Parent PID: 4878
==4879== 
==4879== Invalid write of size 1
==4879==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==4879==    by 0x400D64: read_input (in /graderhome/work/c4prj2_input/tester)
==4879==    by 0x401CD9: main (test-input.c:69)
==4879==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==4879== 
==4879== 
==4879== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4879==  Access not within mapped region at address 0x0
==4879==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==4879==    by 0x400D64: read_input (in /graderhome/work/c4prj2_input/tester)
==4879==    by 0x401CD9: main (test-input.c:69)
==4879==  If you believe this happened as a result of a stack
==4879==  overflow in your program's main thread (unlikely but
==4879==  possible), you can try to increase the size of the
==4879==  main thread stack using the --main-stacksize= flag.
==4879==  The main thread stack size used in this run was 8388608.
==4879== 
==4879== HEAP SUMMARY:
==4879==     in use at exit: 792 bytes in 11 blocks
==4879==   total heap usage: 17 allocs, 6 frees, 5,008 bytes allocated
==4879== 
==4879== LEAK SUMMARY:
==4879==    definitely lost: 0 bytes in 0 blocks
==4879==    indirectly lost: 0 bytes in 0 blocks
==4879==      possibly lost: 0 bytes in 0 blocks
==4879==    still reachable: 792 bytes in 11 blocks
==4879==         suppressed: 0 bytes in 0 blocks
==4879== Rerun with --leak-check=full to see details of leaked memory
==4879== 
==4879== For counts of detected and suppressed errors, rerun with: -v
==4879== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==4885== Memcheck, a memory error detector
==4885== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4885== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4885== Command: ./tester i1 i2
==4885== Parent PID: 4884
==4885== 
==4885== Invalid write of size 1
==4885==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==4885==    by 0x400D64: read_input (in /graderhome/work/c4prj2_input/tester)
==4885==    by 0x401CD9: main (test-input.c:69)
==4885==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==4885== 
==4885== 
==4885== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4885==  Access not within mapped region at address 0x0
==4885==    at 0x400BC2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==4885==    by 0x400D64: read_input (in /graderhome/work/c4prj2_input/tester)
==4885==    by 0x401CD9: main (test-input.c:69)
==4885==  If you believe this happened as a result of a stack
==4885==  overflow in your program's main thread (unlikely but
==4885==  possible), you can try to increase the size of the
==4885==  main thread stack using the --main-stacksize= flag.
==4885==  The main thread stack size used in this run was 8388608.
==4885== 
==4885== HEAP SUMMARY:
==4885==     in use at exit: 744 bytes in 8 blocks
==4885==   total heap usage: 11 allocs, 3 frees, 4,864 bytes allocated
==4885== 
==4885== LEAK SUMMARY:
==4885==    definitely lost: 0 bytes in 0 blocks
==4885==    indirectly lost: 0 bytes in 0 blocks
==4885==      possibly lost: 0 bytes in 0 blocks
==4885==    still reachable: 744 bytes in 8 blocks
==4885==         suppressed: 0 bytes in 0 blocks
==4885== Rerun with --leak-check=full to see details of leaked memory
==4885== 
==4885== For counts of detected and suppressed errors, rerun with: -v
==4885== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: C
