Grading at Sun Jul  7 21:06:28 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==1302== Memcheck, a memory error detector
==1302== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1302== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1302== Command: ./test-eval inp.2.txt
==1302== Parent PID: 1301
==1302== 
==1302== Use of uninitialised value of size 8
==1302==    at 0x400C02: print_hand (deck.c:7)
==1302==    by 0x402911: describe_hand (test-eval.c:74)
==1302==    by 0x402B11: main (test-eval.c:119)
==1302== 
==1302== Invalid read of size 8
==1302==    at 0x400C02: print_hand (deck.c:7)
==1302==    by 0x402911: describe_hand (test-eval.c:74)
==1302==    by 0x402B11: main (test-eval.c:119)
==1302==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1302== 
==1302== 
==1302== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1302==  Access not within mapped region at address 0x0
==1302==    at 0x400C02: print_hand (deck.c:7)
==1302==    by 0x402911: describe_hand (test-eval.c:74)
==1302==    by 0x402B11: main (test-eval.c:119)
==1302==  If you believe this happened as a result of a stack
==1302==  overflow in your program's main thread (unlikely but
==1302==  possible), you can try to increase the size of the
==1302==  main thread stack using the --main-stacksize= flag.
==1302==  The main thread stack size used in this run was 8388608.
==1302== 
==1302== HEAP SUMMARY:
==1302==     in use at exit: 896 bytes in 18 blocks
==1302==   total heap usage: 146 allocs, 128 frees, 11,444 bytes allocated
==1302== 
==1302== LEAK SUMMARY:
==1302==    definitely lost: 0 bytes in 0 blocks
==1302==    indirectly lost: 0 bytes in 0 blocks
==1302==      possibly lost: 0 bytes in 0 blocks
==1302==    still reachable: 896 bytes in 18 blocks
==1302==         suppressed: 0 bytes in 0 blocks
==1302== Rerun with --leak-check=full to see details of leaked memory
==1302== 
==1302== For counts of detected and suppressed errors, rerun with: -v
==1302== Use --track-origins=yes to see where uninitialised values come from
==1302== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==1319== Memcheck, a memory error detector
==1319== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1319== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1319== Command: ./test-eval inp.4.txt
==1319== Parent PID: 1318
==1319== 
==1319== Use of uninitialised value of size 8
==1319==    at 0x400C02: print_hand (deck.c:7)
==1319==    by 0x402911: describe_hand (test-eval.c:74)
==1319==    by 0x402AF1: main (test-eval.c:116)
==1319== 
==1319== Invalid read of size 8
==1319==    at 0x400C02: print_hand (deck.c:7)
==1319==    by 0x402911: describe_hand (test-eval.c:74)
==1319==    by 0x402AF1: main (test-eval.c:116)
==1319==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1319== 
==1319== 
==1319== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1319==  Access not within mapped region at address 0x0
==1319==    at 0x400C02: print_hand (deck.c:7)
==1319==    by 0x402911: describe_hand (test-eval.c:74)
==1319==    by 0x402AF1: main (test-eval.c:116)
==1319==  If you believe this happened as a result of a stack
==1319==  overflow in your program's main thread (unlikely but
==1319==  possible), you can try to increase the size of the
==1319==  main thread stack using the --main-stacksize= flag.
==1319==  The main thread stack size used in this run was 8388608.
==1319== 
==1319== HEAP SUMMARY:
==1319==     in use at exit: 896 bytes in 18 blocks
==1319==   total heap usage: 264 allocs, 246 frees, 13,664 bytes allocated
==1319== 
==1319== LEAK SUMMARY:
==1319==    definitely lost: 0 bytes in 0 blocks
==1319==    indirectly lost: 0 bytes in 0 blocks
==1319==      possibly lost: 0 bytes in 0 blocks
==1319==    still reachable: 896 bytes in 18 blocks
==1319==         suppressed: 0 bytes in 0 blocks
==1319== Rerun with --leak-check=full to see details of leaked memory
==1319== 
==1319== For counts of detected and suppressed errors, rerun with: -v
==1319== Use --track-origins=yes to see where uninitialised values come from
==1319== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==1360== Memcheck, a memory error detector
==1360== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1360== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1360== Command: ./test-eval inp.8.txt
==1360== Parent PID: 1359
==1360== 
==1360== Use of uninitialised value of size 8
==1360==    at 0x400C02: print_hand (deck.c:7)
==1360==    by 0x402911: describe_hand (test-eval.c:74)
==1360==    by 0x402B11: main (test-eval.c:119)
==1360== 
==1360== Invalid read of size 8
==1360==    at 0x400C02: print_hand (deck.c:7)
==1360==    by 0x402911: describe_hand (test-eval.c:74)
==1360==    by 0x402B11: main (test-eval.c:119)
==1360==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1360== 
==1360== 
==1360== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1360==  Access not within mapped region at address 0x0
==1360==    at 0x400C02: print_hand (deck.c:7)
==1360==    by 0x402911: describe_hand (test-eval.c:74)
==1360==    by 0x402B11: main (test-eval.c:119)
==1360==  If you believe this happened as a result of a stack
==1360==  overflow in your program's main thread (unlikely but
==1360==  possible), you can try to increase the size of the
==1360==  main thread stack using the --main-stacksize= flag.
==1360==  The main thread stack size used in this run was 8388608.
==1360== 
==1360== HEAP SUMMARY:
==1360==     in use at exit: 896 bytes in 18 blocks
==1360==   total heap usage: 208 allocs, 190 frees, 12,640 bytes allocated
==1360== 
==1360== LEAK SUMMARY:
==1360==    definitely lost: 0 bytes in 0 blocks
==1360==    indirectly lost: 0 bytes in 0 blocks
==1360==      possibly lost: 0 bytes in 0 blocks
==1360==    still reachable: 896 bytes in 18 blocks
==1360==         suppressed: 0 bytes in 0 blocks
==1360== Rerun with --leak-check=full to see details of leaked memory
==1360== 
==1360== For counts of detected and suppressed errors, rerun with: -v
==1360== Use --track-origins=yes to see where uninitialised values come from
==1360== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 10: Trying each type of hand ranking
 Checking the output 
Your file matched the expected output
 - Testcase passed

Overall Grade: C
