Grading at Mon Jul  8 19:35:40 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==169== Memcheck, a memory error detector
==169== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==169== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==169== Command: ./test-eval inp.2.txt
==169== Parent PID: 168
==169== 
==169== Use of uninitialised value of size 8
==169==    at 0x400C02: print_hand (deck.c:7)
==169==    by 0x40291E: describe_hand (test-eval.c:74)
==169==    by 0x402B1E: main (test-eval.c:119)
==169== 
==169== Invalid read of size 8
==169==    at 0x400C02: print_hand (deck.c:7)
==169==    by 0x40291E: describe_hand (test-eval.c:74)
==169==    by 0x402B1E: main (test-eval.c:119)
==169==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==169== 
==169== 
==169== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==169==  Access not within mapped region at address 0x0
==169==    at 0x400C02: print_hand (deck.c:7)
==169==    by 0x40291E: describe_hand (test-eval.c:74)
==169==    by 0x402B1E: main (test-eval.c:119)
==169==  If you believe this happened as a result of a stack
==169==  overflow in your program's main thread (unlikely but
==169==  possible), you can try to increase the size of the
==169==  main thread stack using the --main-stacksize= flag.
==169==  The main thread stack size used in this run was 8388608.
==169== 
==169== HEAP SUMMARY:
==169==     in use at exit: 896 bytes in 18 blocks
==169==   total heap usage: 146 allocs, 128 frees, 11,444 bytes allocated
==169== 
==169== LEAK SUMMARY:
==169==    definitely lost: 0 bytes in 0 blocks
==169==    indirectly lost: 0 bytes in 0 blocks
==169==      possibly lost: 0 bytes in 0 blocks
==169==    still reachable: 896 bytes in 18 blocks
==169==         suppressed: 0 bytes in 0 blocks
==169== Rerun with --leak-check=full to see details of leaked memory
==169== 
==169== For counts of detected and suppressed errors, rerun with: -v
==169== Use --track-origins=yes to see where uninitialised values come from
==169== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==186== Memcheck, a memory error detector
==186== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==186== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==186== Command: ./test-eval inp.4.txt
==186== Parent PID: 185
==186== 
==186== Use of uninitialised value of size 8
==186==    at 0x400C02: print_hand (deck.c:7)
==186==    by 0x40291E: describe_hand (test-eval.c:74)
==186==    by 0x402AFE: main (test-eval.c:116)
==186== 
==186== Invalid read of size 8
==186==    at 0x400C02: print_hand (deck.c:7)
==186==    by 0x40291E: describe_hand (test-eval.c:74)
==186==    by 0x402AFE: main (test-eval.c:116)
==186==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==186== 
==186== 
==186== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==186==  Access not within mapped region at address 0x0
==186==    at 0x400C02: print_hand (deck.c:7)
==186==    by 0x40291E: describe_hand (test-eval.c:74)
==186==    by 0x402AFE: main (test-eval.c:116)
==186==  If you believe this happened as a result of a stack
==186==  overflow in your program's main thread (unlikely but
==186==  possible), you can try to increase the size of the
==186==  main thread stack using the --main-stacksize= flag.
==186==  The main thread stack size used in this run was 8388608.
==186== 
==186== HEAP SUMMARY:
==186==     in use at exit: 896 bytes in 18 blocks
==186==   total heap usage: 264 allocs, 246 frees, 13,664 bytes allocated
==186== 
==186== LEAK SUMMARY:
==186==    definitely lost: 0 bytes in 0 blocks
==186==    indirectly lost: 0 bytes in 0 blocks
==186==      possibly lost: 0 bytes in 0 blocks
==186==    still reachable: 896 bytes in 18 blocks
==186==         suppressed: 0 bytes in 0 blocks
==186== Rerun with --leak-check=full to see details of leaked memory
==186== 
==186== For counts of detected and suppressed errors, rerun with: -v
==186== Use --track-origins=yes to see where uninitialised values come from
==186== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==227== Memcheck, a memory error detector
==227== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==227== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==227== Command: ./test-eval inp.8.txt
==227== Parent PID: 226
==227== 
==227== Use of uninitialised value of size 8
==227==    at 0x400C02: print_hand (deck.c:7)
==227==    by 0x40291E: describe_hand (test-eval.c:74)
==227==    by 0x402B1E: main (test-eval.c:119)
==227== 
==227== Invalid read of size 8
==227==    at 0x400C02: print_hand (deck.c:7)
==227==    by 0x40291E: describe_hand (test-eval.c:74)
==227==    by 0x402B1E: main (test-eval.c:119)
==227==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==227== 
==227== 
==227== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==227==  Access not within mapped region at address 0x0
==227==    at 0x400C02: print_hand (deck.c:7)
==227==    by 0x40291E: describe_hand (test-eval.c:74)
==227==    by 0x402B1E: main (test-eval.c:119)
==227==  If you believe this happened as a result of a stack
==227==  overflow in your program's main thread (unlikely but
==227==  possible), you can try to increase the size of the
==227==  main thread stack using the --main-stacksize= flag.
==227==  The main thread stack size used in this run was 8388608.
==227== 
==227== HEAP SUMMARY:
==227==     in use at exit: 896 bytes in 18 blocks
==227==   total heap usage: 208 allocs, 190 frees, 12,640 bytes allocated
==227== 
==227== LEAK SUMMARY:
==227==    definitely lost: 0 bytes in 0 blocks
==227==    indirectly lost: 0 bytes in 0 blocks
==227==      possibly lost: 0 bytes in 0 blocks
==227==    still reachable: 896 bytes in 18 blocks
==227==         suppressed: 0 bytes in 0 blocks
==227== Rerun with --leak-check=full to see details of leaked memory
==227== 
==227== For counts of detected and suppressed errors, rerun with: -v
==227== Use --track-origins=yes to see where uninitialised values come from
==227== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 10: Trying each type of hand ranking
 Checking the output 
Your file matched the expected output
 - Testcase passed

Overall Grade: C
