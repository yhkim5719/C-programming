Grading at Sun Jul  7 21:22:55 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==3131== Memcheck, a memory error detector
==3131== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3131== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3131== Command: ./test-eval inp.2.txt
==3131== Parent PID: 3130
==3131== 
==3131== Use of uninitialised value of size 8
==3131==    at 0x400C02: print_hand (deck.c:7)
==3131==    by 0x402922: describe_hand (test-eval.c:74)
==3131==    by 0x402B22: main (test-eval.c:119)
==3131== 
==3131== Invalid read of size 8
==3131==    at 0x400C02: print_hand (deck.c:7)
==3131==    by 0x402922: describe_hand (test-eval.c:74)
==3131==    by 0x402B22: main (test-eval.c:119)
==3131==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==3131== 
==3131== 
==3131== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==3131==  Access not within mapped region at address 0x0
==3131==    at 0x400C02: print_hand (deck.c:7)
==3131==    by 0x402922: describe_hand (test-eval.c:74)
==3131==    by 0x402B22: main (test-eval.c:119)
==3131==  If you believe this happened as a result of a stack
==3131==  overflow in your program's main thread (unlikely but
==3131==  possible), you can try to increase the size of the
==3131==  main thread stack using the --main-stacksize= flag.
==3131==  The main thread stack size used in this run was 8388608.
==3131== 
==3131== HEAP SUMMARY:
==3131==     in use at exit: 896 bytes in 18 blocks
==3131==   total heap usage: 146 allocs, 128 frees, 11,444 bytes allocated
==3131== 
==3131== LEAK SUMMARY:
==3131==    definitely lost: 0 bytes in 0 blocks
==3131==    indirectly lost: 0 bytes in 0 blocks
==3131==      possibly lost: 0 bytes in 0 blocks
==3131==    still reachable: 896 bytes in 18 blocks
==3131==         suppressed: 0 bytes in 0 blocks
==3131== Rerun with --leak-check=full to see details of leaked memory
==3131== 
==3131== For counts of detected and suppressed errors, rerun with: -v
==3131== Use --track-origins=yes to see where uninitialised values come from
==3131== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==3148== Memcheck, a memory error detector
==3148== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3148== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3148== Command: ./test-eval inp.4.txt
==3148== Parent PID: 3147
==3148== 
==3148== Use of uninitialised value of size 8
==3148==    at 0x400C02: print_hand (deck.c:7)
==3148==    by 0x402922: describe_hand (test-eval.c:74)
==3148==    by 0x402B02: main (test-eval.c:116)
==3148== 
==3148== Invalid read of size 8
==3148==    at 0x400C02: print_hand (deck.c:7)
==3148==    by 0x402922: describe_hand (test-eval.c:74)
==3148==    by 0x402B02: main (test-eval.c:116)
==3148==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==3148== 
==3148== 
==3148== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==3148==  Access not within mapped region at address 0x0
==3148==    at 0x400C02: print_hand (deck.c:7)
==3148==    by 0x402922: describe_hand (test-eval.c:74)
==3148==    by 0x402B02: main (test-eval.c:116)
==3148==  If you believe this happened as a result of a stack
==3148==  overflow in your program's main thread (unlikely but
==3148==  possible), you can try to increase the size of the
==3148==  main thread stack using the --main-stacksize= flag.
==3148==  The main thread stack size used in this run was 8388608.
==3148== 
==3148== HEAP SUMMARY:
==3148==     in use at exit: 896 bytes in 18 blocks
==3148==   total heap usage: 264 allocs, 246 frees, 13,664 bytes allocated
==3148== 
==3148== LEAK SUMMARY:
==3148==    definitely lost: 0 bytes in 0 blocks
==3148==    indirectly lost: 0 bytes in 0 blocks
==3148==      possibly lost: 0 bytes in 0 blocks
==3148==    still reachable: 896 bytes in 18 blocks
==3148==         suppressed: 0 bytes in 0 blocks
==3148== Rerun with --leak-check=full to see details of leaked memory
==3148== 
==3148== For counts of detected and suppressed errors, rerun with: -v
==3148== Use --track-origins=yes to see where uninitialised values come from
==3148== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==3189== Memcheck, a memory error detector
==3189== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3189== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3189== Command: ./test-eval inp.8.txt
==3189== Parent PID: 3188
==3189== 
==3189== Use of uninitialised value of size 8
==3189==    at 0x400C02: print_hand (deck.c:7)
==3189==    by 0x402922: describe_hand (test-eval.c:74)
==3189==    by 0x402B22: main (test-eval.c:119)
==3189== 
==3189== Invalid read of size 8
==3189==    at 0x400C02: print_hand (deck.c:7)
==3189==    by 0x402922: describe_hand (test-eval.c:74)
==3189==    by 0x402B22: main (test-eval.c:119)
==3189==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==3189== 
==3189== 
==3189== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==3189==  Access not within mapped region at address 0x0
==3189==    at 0x400C02: print_hand (deck.c:7)
==3189==    by 0x402922: describe_hand (test-eval.c:74)
==3189==    by 0x402B22: main (test-eval.c:119)
==3189==  If you believe this happened as a result of a stack
==3189==  overflow in your program's main thread (unlikely but
==3189==  possible), you can try to increase the size of the
==3189==  main thread stack using the --main-stacksize= flag.
==3189==  The main thread stack size used in this run was 8388608.
==3189== 
==3189== HEAP SUMMARY:
==3189==     in use at exit: 896 bytes in 18 blocks
==3189==   total heap usage: 208 allocs, 190 frees, 12,640 bytes allocated
==3189== 
==3189== LEAK SUMMARY:
==3189==    definitely lost: 0 bytes in 0 blocks
==3189==    indirectly lost: 0 bytes in 0 blocks
==3189==      possibly lost: 0 bytes in 0 blocks
==3189==    still reachable: 896 bytes in 18 blocks
==3189==         suppressed: 0 bytes in 0 blocks
==3189== Rerun with --leak-check=full to see details of leaked memory
==3189== 
==3189== For counts of detected and suppressed errors, rerun with: -v
==3189== Use --track-origins=yes to see where uninitialised values come from
==3189== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 10: Trying each type of hand ranking
 Checking the output 
Your file matched the expected output
 - Testcase passed

Overall Grade: C
