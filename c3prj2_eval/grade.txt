Grading at Sun Jul  7 21:17:22 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==2891== Memcheck, a memory error detector
==2891== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2891== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2891== Command: ./test-eval inp.2.txt
==2891== Parent PID: 2890
==2891== 
==2891== Use of uninitialised value of size 8
==2891==    at 0x400C02: print_hand (deck.c:7)
==2891==    by 0x40291E: describe_hand (test-eval.c:74)
==2891==    by 0x402B1E: main (test-eval.c:119)
==2891== 
==2891== Invalid read of size 8
==2891==    at 0x400C02: print_hand (deck.c:7)
==2891==    by 0x40291E: describe_hand (test-eval.c:74)
==2891==    by 0x402B1E: main (test-eval.c:119)
==2891==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==2891== 
==2891== 
==2891== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2891==  Access not within mapped region at address 0x0
==2891==    at 0x400C02: print_hand (deck.c:7)
==2891==    by 0x40291E: describe_hand (test-eval.c:74)
==2891==    by 0x402B1E: main (test-eval.c:119)
==2891==  If you believe this happened as a result of a stack
==2891==  overflow in your program's main thread (unlikely but
==2891==  possible), you can try to increase the size of the
==2891==  main thread stack using the --main-stacksize= flag.
==2891==  The main thread stack size used in this run was 8388608.
==2891== 
==2891== HEAP SUMMARY:
==2891==     in use at exit: 896 bytes in 18 blocks
==2891==   total heap usage: 146 allocs, 128 frees, 11,444 bytes allocated
==2891== 
==2891== LEAK SUMMARY:
==2891==    definitely lost: 0 bytes in 0 blocks
==2891==    indirectly lost: 0 bytes in 0 blocks
==2891==      possibly lost: 0 bytes in 0 blocks
==2891==    still reachable: 896 bytes in 18 blocks
==2891==         suppressed: 0 bytes in 0 blocks
==2891== Rerun with --leak-check=full to see details of leaked memory
==2891== 
==2891== For counts of detected and suppressed errors, rerun with: -v
==2891== Use --track-origins=yes to see where uninitialised values come from
==2891== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==2908== Memcheck, a memory error detector
==2908== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2908== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2908== Command: ./test-eval inp.4.txt
==2908== Parent PID: 2907
==2908== 
==2908== Use of uninitialised value of size 8
==2908==    at 0x400C02: print_hand (deck.c:7)
==2908==    by 0x40291E: describe_hand (test-eval.c:74)
==2908==    by 0x402AFE: main (test-eval.c:116)
==2908== 
==2908== Invalid read of size 8
==2908==    at 0x400C02: print_hand (deck.c:7)
==2908==    by 0x40291E: describe_hand (test-eval.c:74)
==2908==    by 0x402AFE: main (test-eval.c:116)
==2908==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==2908== 
==2908== 
==2908== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2908==  Access not within mapped region at address 0x0
==2908==    at 0x400C02: print_hand (deck.c:7)
==2908==    by 0x40291E: describe_hand (test-eval.c:74)
==2908==    by 0x402AFE: main (test-eval.c:116)
==2908==  If you believe this happened as a result of a stack
==2908==  overflow in your program's main thread (unlikely but
==2908==  possible), you can try to increase the size of the
==2908==  main thread stack using the --main-stacksize= flag.
==2908==  The main thread stack size used in this run was 8388608.
==2908== 
==2908== HEAP SUMMARY:
==2908==     in use at exit: 896 bytes in 18 blocks
==2908==   total heap usage: 264 allocs, 246 frees, 13,664 bytes allocated
==2908== 
==2908== LEAK SUMMARY:
==2908==    definitely lost: 0 bytes in 0 blocks
==2908==    indirectly lost: 0 bytes in 0 blocks
==2908==      possibly lost: 0 bytes in 0 blocks
==2908==    still reachable: 896 bytes in 18 blocks
==2908==         suppressed: 0 bytes in 0 blocks
==2908== Rerun with --leak-check=full to see details of leaked memory
==2908== 
==2908== For counts of detected and suppressed errors, rerun with: -v
==2908== Use --track-origins=yes to see where uninitialised values come from
==2908== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==2949== Memcheck, a memory error detector
==2949== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2949== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2949== Command: ./test-eval inp.8.txt
==2949== Parent PID: 2948
==2949== 
==2949== Use of uninitialised value of size 8
==2949==    at 0x400C02: print_hand (deck.c:7)
==2949==    by 0x40291E: describe_hand (test-eval.c:74)
==2949==    by 0x402B1E: main (test-eval.c:119)
==2949== 
==2949== Invalid read of size 8
==2949==    at 0x400C02: print_hand (deck.c:7)
==2949==    by 0x40291E: describe_hand (test-eval.c:74)
==2949==    by 0x402B1E: main (test-eval.c:119)
==2949==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==2949== 
==2949== 
==2949== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2949==  Access not within mapped region at address 0x0
==2949==    at 0x400C02: print_hand (deck.c:7)
==2949==    by 0x40291E: describe_hand (test-eval.c:74)
==2949==    by 0x402B1E: main (test-eval.c:119)
==2949==  If you believe this happened as a result of a stack
==2949==  overflow in your program's main thread (unlikely but
==2949==  possible), you can try to increase the size of the
==2949==  main thread stack using the --main-stacksize= flag.
==2949==  The main thread stack size used in this run was 8388608.
==2949== 
==2949== HEAP SUMMARY:
==2949==     in use at exit: 896 bytes in 18 blocks
==2949==   total heap usage: 208 allocs, 190 frees, 12,640 bytes allocated
==2949== 
==2949== LEAK SUMMARY:
==2949==    definitely lost: 0 bytes in 0 blocks
==2949==    indirectly lost: 0 bytes in 0 blocks
==2949==      possibly lost: 0 bytes in 0 blocks
==2949==    still reachable: 896 bytes in 18 blocks
==2949==         suppressed: 0 bytes in 0 blocks
==2949== Rerun with --leak-check=full to see details of leaked memory
==2949== 
==2949== For counts of detected and suppressed errors, rerun with: -v
==2949== Use --track-origins=yes to see where uninitialised values come from
==2949== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 10: Trying each type of hand ranking
 Checking the output 
Your file matched the expected output
 - Testcase passed

Overall Grade: C
