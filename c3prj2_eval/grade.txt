Grading at Mon Jul  8 21:02:44 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==2172== Memcheck, a memory error detector
==2172== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2172== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2172== Command: ./test-eval inp.2.txt
==2172== Parent PID: 2171
==2172== 
==2172== Use of uninitialised value of size 8
==2172==    at 0x400C02: print_hand (deck.c:7)
==2172==    by 0x40292F: describe_hand (test-eval.c:74)
==2172==    by 0x402B2F: main (test-eval.c:119)
==2172== 
==2172== Invalid read of size 8
==2172==    at 0x400C02: print_hand (deck.c:7)
==2172==    by 0x40292F: describe_hand (test-eval.c:74)
==2172==    by 0x402B2F: main (test-eval.c:119)
==2172==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==2172== 
==2172== 
==2172== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2172==  Access not within mapped region at address 0x0
==2172==    at 0x400C02: print_hand (deck.c:7)
==2172==    by 0x40292F: describe_hand (test-eval.c:74)
==2172==    by 0x402B2F: main (test-eval.c:119)
==2172==  If you believe this happened as a result of a stack
==2172==  overflow in your program's main thread (unlikely but
==2172==  possible), you can try to increase the size of the
==2172==  main thread stack using the --main-stacksize= flag.
==2172==  The main thread stack size used in this run was 8388608.
==2172== 
==2172== HEAP SUMMARY:
==2172==     in use at exit: 896 bytes in 18 blocks
==2172==   total heap usage: 146 allocs, 128 frees, 11,444 bytes allocated
==2172== 
==2172== LEAK SUMMARY:
==2172==    definitely lost: 0 bytes in 0 blocks
==2172==    indirectly lost: 0 bytes in 0 blocks
==2172==      possibly lost: 0 bytes in 0 blocks
==2172==    still reachable: 896 bytes in 18 blocks
==2172==         suppressed: 0 bytes in 0 blocks
==2172== Rerun with --leak-check=full to see details of leaked memory
==2172== 
==2172== For counts of detected and suppressed errors, rerun with: -v
==2172== Use --track-origins=yes to see where uninitialised values come from
==2172== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==2189== Memcheck, a memory error detector
==2189== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2189== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2189== Command: ./test-eval inp.4.txt
==2189== Parent PID: 2188
==2189== 
==2189== Use of uninitialised value of size 8
==2189==    at 0x400C02: print_hand (deck.c:7)
==2189==    by 0x40292F: describe_hand (test-eval.c:74)
==2189==    by 0x402B0F: main (test-eval.c:116)
==2189== 
==2189== Invalid read of size 8
==2189==    at 0x400C02: print_hand (deck.c:7)
==2189==    by 0x40292F: describe_hand (test-eval.c:74)
==2189==    by 0x402B0F: main (test-eval.c:116)
==2189==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==2189== 
==2189== 
==2189== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2189==  Access not within mapped region at address 0x0
==2189==    at 0x400C02: print_hand (deck.c:7)
==2189==    by 0x40292F: describe_hand (test-eval.c:74)
==2189==    by 0x402B0F: main (test-eval.c:116)
==2189==  If you believe this happened as a result of a stack
==2189==  overflow in your program's main thread (unlikely but
==2189==  possible), you can try to increase the size of the
==2189==  main thread stack using the --main-stacksize= flag.
==2189==  The main thread stack size used in this run was 8388608.
==2189== 
==2189== HEAP SUMMARY:
==2189==     in use at exit: 896 bytes in 18 blocks
==2189==   total heap usage: 264 allocs, 246 frees, 13,664 bytes allocated
==2189== 
==2189== LEAK SUMMARY:
==2189==    definitely lost: 0 bytes in 0 blocks
==2189==    indirectly lost: 0 bytes in 0 blocks
==2189==      possibly lost: 0 bytes in 0 blocks
==2189==    still reachable: 896 bytes in 18 blocks
==2189==         suppressed: 0 bytes in 0 blocks
==2189== Rerun with --leak-check=full to see details of leaked memory
==2189== 
==2189== For counts of detected and suppressed errors, rerun with: -v
==2189== Use --track-origins=yes to see where uninitialised values come from
==2189== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==2230== Memcheck, a memory error detector
==2230== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2230== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2230== Command: ./test-eval inp.8.txt
==2230== Parent PID: 2229
==2230== 
==2230== Use of uninitialised value of size 8
==2230==    at 0x400C02: print_hand (deck.c:7)
==2230==    by 0x40292F: describe_hand (test-eval.c:74)
==2230==    by 0x402B2F: main (test-eval.c:119)
==2230== 
==2230== Invalid read of size 8
==2230==    at 0x400C02: print_hand (deck.c:7)
==2230==    by 0x40292F: describe_hand (test-eval.c:74)
==2230==    by 0x402B2F: main (test-eval.c:119)
==2230==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==2230== 
==2230== 
==2230== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2230==  Access not within mapped region at address 0x0
==2230==    at 0x400C02: print_hand (deck.c:7)
==2230==    by 0x40292F: describe_hand (test-eval.c:74)
==2230==    by 0x402B2F: main (test-eval.c:119)
==2230==  If you believe this happened as a result of a stack
==2230==  overflow in your program's main thread (unlikely but
==2230==  possible), you can try to increase the size of the
==2230==  main thread stack using the --main-stacksize= flag.
==2230==  The main thread stack size used in this run was 8388608.
==2230== 
==2230== HEAP SUMMARY:
==2230==     in use at exit: 896 bytes in 18 blocks
==2230==   total heap usage: 208 allocs, 190 frees, 12,640 bytes allocated
==2230== 
==2230== LEAK SUMMARY:
==2230==    definitely lost: 0 bytes in 0 blocks
==2230==    indirectly lost: 0 bytes in 0 blocks
==2230==      possibly lost: 0 bytes in 0 blocks
==2230==    still reachable: 896 bytes in 18 blocks
==2230==         suppressed: 0 bytes in 0 blocks
==2230== Rerun with --leak-check=full to see details of leaked memory
==2230== 
==2230== For counts of detected and suppressed errors, rerun with: -v
==2230== Use --track-origins=yes to see where uninitialised values come from
==2230== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 10: Trying each type of hand ranking
 Checking the output 
Your file matched the expected output
 - Testcase passed

Overall Grade: C
