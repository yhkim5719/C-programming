Grading at Sun Jul  7 21:26:38 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==3589== Memcheck, a memory error detector
==3589== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3589== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3589== Command: ./test-eval inp.1.txt
==3589== Parent PID: 3588
==3589== 
==3589== Invalid read of size 8
==3589==    at 0x40149B: card_ptr_comp (eval.c:9)
==3589==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3589==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3589==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3589==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3589==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3589==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3589==    by 0x4E7369E: qsort_r (msort.c:297)
==3589==    by 0x401BEF: sort_hand (eval.c:144)
==3589==    by 0x401C29: compare_hands (eval.c:149)
==3589==    by 0x402B7B: main (test-eval.c:124)
==3589==  Address 0x5207230 is 0 bytes after a block of size 48 alloc'd
==3589==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==3589==    by 0x40104A: add_card_to (deck-c4.c:29)
==3589==    by 0x4033D3: hand_from_string (input.c:49)
==3589==    by 0x402B4F: main (test-eval.c:122)
==3589== 
==3589== Invalid read of size 4
==3589==    at 0x40149E: card_ptr_comp (eval.c:9)
==3589==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3589==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3589==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3589==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3589==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3589==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3589==    by 0x4E7369E: qsort_r (msort.c:297)
==3589==    by 0x401BEF: sort_hand (eval.c:144)
==3589==    by 0x401C29: compare_hands (eval.c:149)
==3589==    by 0x402B7B: main (test-eval.c:124)
==3589==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==3589== 
==3589== 
==3589== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==3589==  Access not within mapped region at address 0x0
==3589==    at 0x40149E: card_ptr_comp (eval.c:9)
==3589==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3589==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3589==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3589==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3589==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3589==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3589==    by 0x4E7369E: qsort_r (msort.c:297)
==3589==    by 0x401BEF: sort_hand (eval.c:144)
==3589==    by 0x401C29: compare_hands (eval.c:149)
==3589==    by 0x402B7B: main (test-eval.c:124)
==3589==  If you believe this happened as a result of a stack
==3589==  overflow in your program's main thread (unlikely but
==3589==  possible), you can try to increase the size of the
==3589==  main thread stack using the --main-stacksize= flag.
==3589==  The main thread stack size used in this run was 8388608.
==3589== 
==3589== HEAP SUMMARY:
==3589==     in use at exit: 896 bytes in 18 blocks
==3589==   total heap usage: 60 allocs, 42 frees, 9,888 bytes allocated
==3589== 
==3589== LEAK SUMMARY:
==3589==    definitely lost: 0 bytes in 0 blocks
==3589==    indirectly lost: 0 bytes in 0 blocks
==3589==      possibly lost: 0 bytes in 0 blocks
==3589==    still reachable: 896 bytes in 18 blocks
==3589==         suppressed: 0 bytes in 0 blocks
==3589== Rerun with --leak-check=full to see details of leaked memory
==3589== 
==3589== For counts of detected and suppressed errors, rerun with: -v
==3589== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==3594== Memcheck, a memory error detector
==3594== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3594== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3594== Command: ./test-eval inp.2.txt
==3594== Parent PID: 3593
==3594== 
==3594== Invalid read of size 8
==3594==    at 0x40149B: card_ptr_comp (eval.c:9)
==3594==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3594==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3594==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3594==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3594==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3594==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3594==    by 0x4E7369E: qsort_r (msort.c:297)
==3594==    by 0x401BEF: sort_hand (eval.c:144)
==3594==    by 0x401C29: compare_hands (eval.c:149)
==3594==    by 0x402B7B: main (test-eval.c:124)
==3594==  Address 0x5207170 is 0 bytes after a block of size 48 alloc'd
==3594==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==3594==    by 0x40104A: add_card_to (deck-c4.c:29)
==3594==    by 0x4033D3: hand_from_string (input.c:49)
==3594==    by 0x402B4F: main (test-eval.c:122)
==3594== 
==3594== Invalid read of size 4
==3594==    at 0x40149E: card_ptr_comp (eval.c:9)
==3594==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3594==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3594==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3594==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3594==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3594==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3594==    by 0x4E7369E: qsort_r (msort.c:297)
==3594==    by 0x401BEF: sort_hand (eval.c:144)
==3594==    by 0x401C29: compare_hands (eval.c:149)
==3594==    by 0x402B7B: main (test-eval.c:124)
==3594==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==3594== 
==3594== 
==3594== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==3594==  Access not within mapped region at address 0x0
==3594==    at 0x40149E: card_ptr_comp (eval.c:9)
==3594==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3594==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3594==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3594==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3594==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3594==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3594==    by 0x4E7369E: qsort_r (msort.c:297)
==3594==    by 0x401BEF: sort_hand (eval.c:144)
==3594==    by 0x401C29: compare_hands (eval.c:149)
==3594==    by 0x402B7B: main (test-eval.c:124)
==3594==  If you believe this happened as a result of a stack
==3594==  overflow in your program's main thread (unlikely but
==3594==  possible), you can try to increase the size of the
==3594==  main thread stack using the --main-stacksize= flag.
==3594==  The main thread stack size used in this run was 8388608.
==3594== 
==3594== HEAP SUMMARY:
==3594==     in use at exit: 880 bytes in 17 blocks
==3594==   total heap usage: 56 allocs, 39 frees, 9,768 bytes allocated
==3594== 
==3594== LEAK SUMMARY:
==3594==    definitely lost: 0 bytes in 0 blocks
==3594==    indirectly lost: 0 bytes in 0 blocks
==3594==      possibly lost: 0 bytes in 0 blocks
==3594==    still reachable: 880 bytes in 17 blocks
==3594==         suppressed: 0 bytes in 0 blocks
==3594== Rerun with --leak-check=full to see details of leaked memory
==3594== 
==3594== For counts of detected and suppressed errors, rerun with: -v
==3594== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==3599== Memcheck, a memory error detector
==3599== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3599== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3599== Command: ./test-eval inp.3.txt
==3599== Parent PID: 3598
==3599== 
==3599== Invalid read of size 8
==3599==    at 0x40149B: card_ptr_comp (eval.c:9)
==3599==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3599==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3599==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3599==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3599==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3599==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3599==    by 0x4E7369E: qsort_r (msort.c:297)
==3599==    by 0x401BEF: sort_hand (eval.c:144)
==3599==    by 0x401C29: compare_hands (eval.c:149)
==3599==    by 0x402B7B: main (test-eval.c:124)
==3599==  Address 0x5206fe8 is 0 bytes after a block of size 40 alloc'd
==3599==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==3599==    by 0x40104A: add_card_to (deck-c4.c:29)
==3599==    by 0x4033D3: hand_from_string (input.c:49)
==3599==    by 0x402B4F: main (test-eval.c:122)
==3599== 
==3599== Invalid read of size 4
==3599==    at 0x40149E: card_ptr_comp (eval.c:9)
==3599==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3599==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3599==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3599==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3599==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3599==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3599==    by 0x4E7369E: qsort_r (msort.c:297)
==3599==    by 0x401BEF: sort_hand (eval.c:144)
==3599==    by 0x401C29: compare_hands (eval.c:149)
==3599==    by 0x402B7B: main (test-eval.c:124)
==3599==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==3599== 
==3599== 
==3599== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==3599==  Access not within mapped region at address 0x0
==3599==    at 0x40149E: card_ptr_comp (eval.c:9)
==3599==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3599==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3599==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3599==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3599==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3599==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3599==    by 0x4E7369E: qsort_r (msort.c:297)
==3599==    by 0x401BEF: sort_hand (eval.c:144)
==3599==    by 0x401C29: compare_hands (eval.c:149)
==3599==    by 0x402B7B: main (test-eval.c:124)
==3599==  If you believe this happened as a result of a stack
==3599==  overflow in your program's main thread (unlikely but
==3599==  possible), you can try to increase the size of the
==3599==  main thread stack using the --main-stacksize= flag.
==3599==  The main thread stack size used in this run was 8388608.
==3599== 
==3599== HEAP SUMMARY:
==3599==     in use at exit: 864 bytes in 16 blocks
==3599==   total heap usage: 52 allocs, 36 frees, 9,648 bytes allocated
==3599== 
==3599== LEAK SUMMARY:
==3599==    definitely lost: 0 bytes in 0 blocks
==3599==    indirectly lost: 0 bytes in 0 blocks
==3599==      possibly lost: 0 bytes in 0 blocks
==3599==    still reachable: 864 bytes in 16 blocks
==3599==         suppressed: 0 bytes in 0 blocks
==3599== Rerun with --leak-check=full to see details of leaked memory
==3599== 
==3599== For counts of detected and suppressed errors, rerun with: -v
==3599== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==3604== Memcheck, a memory error detector
==3604== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3604== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3604== Command: ./test-eval inp.4.txt
==3604== Parent PID: 3603
==3604== 
==3604== Invalid read of size 8
==3604==    at 0x40149B: card_ptr_comp (eval.c:9)
==3604==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3604==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3604==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3604==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3604==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3604==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3604==    by 0x4E7369E: qsort_r (msort.c:297)
==3604==    by 0x401BEF: sort_hand (eval.c:144)
==3604==    by 0x401C29: compare_hands (eval.c:149)
==3604==    by 0x402B7B: main (test-eval.c:124)
==3604==  Address 0x5207230 is 0 bytes after a block of size 48 alloc'd
==3604==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==3604==    by 0x40104A: add_card_to (deck-c4.c:29)
==3604==    by 0x4033D3: hand_from_string (input.c:49)
==3604==    by 0x402B4F: main (test-eval.c:122)
==3604== 
==3604== Invalid read of size 4
==3604==    at 0x40149E: card_ptr_comp (eval.c:9)
==3604==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3604==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3604==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3604==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3604==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3604==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3604==    by 0x4E7369E: qsort_r (msort.c:297)
==3604==    by 0x401BEF: sort_hand (eval.c:144)
==3604==    by 0x401C29: compare_hands (eval.c:149)
==3604==    by 0x402B7B: main (test-eval.c:124)
==3604==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==3604== 
==3604== 
==3604== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==3604==  Access not within mapped region at address 0x0
==3604==    at 0x40149E: card_ptr_comp (eval.c:9)
==3604==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3604==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3604==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3604==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3604==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3604==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3604==    by 0x4E7369E: qsort_r (msort.c:297)
==3604==    by 0x401BEF: sort_hand (eval.c:144)
==3604==    by 0x401C29: compare_hands (eval.c:149)
==3604==    by 0x402B7B: main (test-eval.c:124)
==3604==  If you believe this happened as a result of a stack
==3604==  overflow in your program's main thread (unlikely but
==3604==  possible), you can try to increase the size of the
==3604==  main thread stack using the --main-stacksize= flag.
==3604==  The main thread stack size used in this run was 8388608.
==3604== 
==3604== HEAP SUMMARY:
==3604==     in use at exit: 896 bytes in 18 blocks
==3604==   total heap usage: 60 allocs, 42 frees, 9,888 bytes allocated
==3604== 
==3604== LEAK SUMMARY:
==3604==    definitely lost: 0 bytes in 0 blocks
==3604==    indirectly lost: 0 bytes in 0 blocks
==3604==      possibly lost: 0 bytes in 0 blocks
==3604==    still reachable: 896 bytes in 18 blocks
==3604==         suppressed: 0 bytes in 0 blocks
==3604== Rerun with --leak-check=full to see details of leaked memory
==3604== 
==3604== For counts of detected and suppressed errors, rerun with: -v
==3604== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==3609== Memcheck, a memory error detector
==3609== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3609== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3609== Command: ./test-eval inp.5.txt
==3609== Parent PID: 3608
==3609== 
==3609== Invalid read of size 8
==3609==    at 0x40149B: card_ptr_comp (eval.c:9)
==3609==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3609==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3609==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3609==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3609==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3609==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3609==    by 0x4E7369E: qsort_r (msort.c:297)
==3609==    by 0x401BEF: sort_hand (eval.c:144)
==3609==    by 0x401C29: compare_hands (eval.c:149)
==3609==    by 0x402B7B: main (test-eval.c:124)
==3609==  Address 0x5206fe8 is 0 bytes after a block of size 40 alloc'd
==3609==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==3609==    by 0x40104A: add_card_to (deck-c4.c:29)
==3609==    by 0x4033D3: hand_from_string (input.c:49)
==3609==    by 0x402B4F: main (test-eval.c:122)
==3609== 
==3609== Invalid read of size 4
==3609==    at 0x40149E: card_ptr_comp (eval.c:9)
==3609==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3609==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3609==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3609==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3609==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3609==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3609==    by 0x4E7369E: qsort_r (msort.c:297)
==3609==    by 0x401BEF: sort_hand (eval.c:144)
==3609==    by 0x401C29: compare_hands (eval.c:149)
==3609==    by 0x402B7B: main (test-eval.c:124)
==3609==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==3609== 
==3609== 
==3609== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==3609==  Access not within mapped region at address 0x0
==3609==    at 0x40149E: card_ptr_comp (eval.c:9)
==3609==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3609==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3609==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3609==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3609==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3609==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3609==    by 0x4E7369E: qsort_r (msort.c:297)
==3609==    by 0x401BEF: sort_hand (eval.c:144)
==3609==    by 0x401C29: compare_hands (eval.c:149)
==3609==    by 0x402B7B: main (test-eval.c:124)
==3609==  If you believe this happened as a result of a stack
==3609==  overflow in your program's main thread (unlikely but
==3609==  possible), you can try to increase the size of the
==3609==  main thread stack using the --main-stacksize= flag.
==3609==  The main thread stack size used in this run was 8388608.
==3609== 
==3609== HEAP SUMMARY:
==3609==     in use at exit: 864 bytes in 16 blocks
==3609==   total heap usage: 52 allocs, 36 frees, 9,648 bytes allocated
==3609== 
==3609== LEAK SUMMARY:
==3609==    definitely lost: 0 bytes in 0 blocks
==3609==    indirectly lost: 0 bytes in 0 blocks
==3609==      possibly lost: 0 bytes in 0 blocks
==3609==    still reachable: 864 bytes in 16 blocks
==3609==         suppressed: 0 bytes in 0 blocks
==3609== Rerun with --leak-check=full to see details of leaked memory
==3609== 
==3609== For counts of detected and suppressed errors, rerun with: -v
==3609== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
Valgrind returned an error status
==3614== Memcheck, a memory error detector
==3614== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3614== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3614== Command: ./test-eval inp.6.txt
==3614== Parent PID: 3613
==3614== 
==3614== Invalid read of size 8
==3614==    at 0x40149B: card_ptr_comp (eval.c:9)
==3614==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3614==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3614==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3614==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3614==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3614==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3614==    by 0x4E7369E: qsort_r (msort.c:297)
==3614==    by 0x401BEF: sort_hand (eval.c:144)
==3614==    by 0x401C29: compare_hands (eval.c:149)
==3614==    by 0x402B7B: main (test-eval.c:124)
==3614==  Address 0x5207230 is 0 bytes after a block of size 48 alloc'd
==3614==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==3614==    by 0x40104A: add_card_to (deck-c4.c:29)
==3614==    by 0x4033D3: hand_from_string (input.c:49)
==3614==    by 0x402B4F: main (test-eval.c:122)
==3614== 
==3614== Invalid read of size 4
==3614==    at 0x40149E: card_ptr_comp (eval.c:9)
==3614==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3614==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3614==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3614==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3614==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3614==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3614==    by 0x4E7369E: qsort_r (msort.c:297)
==3614==    by 0x401BEF: sort_hand (eval.c:144)
==3614==    by 0x401C29: compare_hands (eval.c:149)
==3614==    by 0x402B7B: main (test-eval.c:124)
==3614==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==3614== 
==3614== 
==3614== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==3614==  Access not within mapped region at address 0x0
==3614==    at 0x40149E: card_ptr_comp (eval.c:9)
==3614==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3614==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3614==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3614==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3614==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3614==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3614==    by 0x4E7369E: qsort_r (msort.c:297)
==3614==    by 0x401BEF: sort_hand (eval.c:144)
==3614==    by 0x401C29: compare_hands (eval.c:149)
==3614==    by 0x402B7B: main (test-eval.c:124)
==3614==  If you believe this happened as a result of a stack
==3614==  overflow in your program's main thread (unlikely but
==3614==  possible), you can try to increase the size of the
==3614==  main thread stack using the --main-stacksize= flag.
==3614==  The main thread stack size used in this run was 8388608.
==3614== 
==3614== HEAP SUMMARY:
==3614==     in use at exit: 896 bytes in 18 blocks
==3614==   total heap usage: 60 allocs, 42 frees, 9,888 bytes allocated
==3614== 
==3614== LEAK SUMMARY:
==3614==    definitely lost: 0 bytes in 0 blocks
==3614==    indirectly lost: 0 bytes in 0 blocks
==3614==      possibly lost: 0 bytes in 0 blocks
==3614==    still reachable: 896 bytes in 18 blocks
==3614==         suppressed: 0 bytes in 0 blocks
==3614== Rerun with --leak-check=full to see details of leaked memory
==3614== 
==3614== For counts of detected and suppressed errors, rerun with: -v
==3614== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==3619== Memcheck, a memory error detector
==3619== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3619== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3619== Command: ./test-eval inp.7.txt
==3619== Parent PID: 3618
==3619== 
==3619== Invalid read of size 8
==3619==    at 0x40149B: card_ptr_comp (eval.c:9)
==3619==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3619==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3619==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3619==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3619==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3619==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3619==    by 0x4E7369E: qsort_r (msort.c:297)
==3619==    by 0x401BEF: sort_hand (eval.c:144)
==3619==    by 0x401C29: compare_hands (eval.c:149)
==3619==    by 0x402B7B: main (test-eval.c:124)
==3619==  Address 0x5207498 is 0 bytes after a block of size 56 alloc'd
==3619==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==3619==    by 0x40104A: add_card_to (deck-c4.c:29)
==3619==    by 0x4033D3: hand_from_string (input.c:49)
==3619==    by 0x402B4F: main (test-eval.c:122)
==3619== 
==3619== Invalid read of size 4
==3619==    at 0x40149E: card_ptr_comp (eval.c:9)
==3619==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3619==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3619==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3619==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3619==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3619==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3619==    by 0x4E7369E: qsort_r (msort.c:297)
==3619==    by 0x401BEF: sort_hand (eval.c:144)
==3619==    by 0x401C29: compare_hands (eval.c:149)
==3619==    by 0x402B7B: main (test-eval.c:124)
==3619==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==3619== 
==3619== 
==3619== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==3619==  Access not within mapped region at address 0x0
==3619==    at 0x40149E: card_ptr_comp (eval.c:9)
==3619==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3619==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3619==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3619==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3619==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3619==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3619==    by 0x4E7369E: qsort_r (msort.c:297)
==3619==    by 0x401BEF: sort_hand (eval.c:144)
==3619==    by 0x401C29: compare_hands (eval.c:149)
==3619==    by 0x402B7B: main (test-eval.c:124)
==3619==  If you believe this happened as a result of a stack
==3619==  overflow in your program's main thread (unlikely but
==3619==  possible), you can try to increase the size of the
==3619==  main thread stack using the --main-stacksize= flag.
==3619==  The main thread stack size used in this run was 8388608.
==3619== 
==3619== HEAP SUMMARY:
==3619==     in use at exit: 928 bytes in 20 blocks
==3619==   total heap usage: 68 allocs, 48 frees, 10,160 bytes allocated
==3619== 
==3619== LEAK SUMMARY:
==3619==    definitely lost: 0 bytes in 0 blocks
==3619==    indirectly lost: 0 bytes in 0 blocks
==3619==      possibly lost: 0 bytes in 0 blocks
==3619==    still reachable: 928 bytes in 20 blocks
==3619==         suppressed: 0 bytes in 0 blocks
==3619== Rerun with --leak-check=full to see details of leaked memory
==3619== 
==3619== For counts of detected and suppressed errors, rerun with: -v
==3619== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==3624== Memcheck, a memory error detector
==3624== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3624== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3624== Command: ./test-eval inp.8.txt
==3624== Parent PID: 3623
==3624== 
==3624== Invalid read of size 8
==3624==    at 0x40149B: card_ptr_comp (eval.c:9)
==3624==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3624==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3624==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3624==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3624==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3624==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3624==    by 0x4E7369E: qsort_r (msort.c:297)
==3624==    by 0x401BEF: sort_hand (eval.c:144)
==3624==    by 0x401C29: compare_hands (eval.c:149)
==3624==    by 0x402B7B: main (test-eval.c:124)
==3624==  Address 0x5207230 is 0 bytes after a block of size 48 alloc'd
==3624==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==3624==    by 0x40104A: add_card_to (deck-c4.c:29)
==3624==    by 0x4033D3: hand_from_string (input.c:49)
==3624==    by 0x402B4F: main (test-eval.c:122)
==3624== 
==3624== Invalid read of size 4
==3624==    at 0x40149E: card_ptr_comp (eval.c:9)
==3624==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3624==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3624==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3624==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3624==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3624==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3624==    by 0x4E7369E: qsort_r (msort.c:297)
==3624==    by 0x401BEF: sort_hand (eval.c:144)
==3624==    by 0x401C29: compare_hands (eval.c:149)
==3624==    by 0x402B7B: main (test-eval.c:124)
==3624==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==3624== 
==3624== 
==3624== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==3624==  Access not within mapped region at address 0x0
==3624==    at 0x40149E: card_ptr_comp (eval.c:9)
==3624==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3624==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3624==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3624==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3624==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3624==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3624==    by 0x4E7369E: qsort_r (msort.c:297)
==3624==    by 0x401BEF: sort_hand (eval.c:144)
==3624==    by 0x401C29: compare_hands (eval.c:149)
==3624==    by 0x402B7B: main (test-eval.c:124)
==3624==  If you believe this happened as a result of a stack
==3624==  overflow in your program's main thread (unlikely but
==3624==  possible), you can try to increase the size of the
==3624==  main thread stack using the --main-stacksize= flag.
==3624==  The main thread stack size used in this run was 8388608.
==3624== 
==3624== HEAP SUMMARY:
==3624==     in use at exit: 896 bytes in 18 blocks
==3624==   total heap usage: 60 allocs, 42 frees, 9,888 bytes allocated
==3624== 
==3624== LEAK SUMMARY:
==3624==    definitely lost: 0 bytes in 0 blocks
==3624==    indirectly lost: 0 bytes in 0 blocks
==3624==      possibly lost: 0 bytes in 0 blocks
==3624==    still reachable: 896 bytes in 18 blocks
==3624==         suppressed: 0 bytes in 0 blocks
==3624== Rerun with --leak-check=full to see details of leaked memory
==3624== 
==3624== For counts of detected and suppressed errors, rerun with: -v
==3624== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
Valgrind returned an error status
==3629== Memcheck, a memory error detector
==3629== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3629== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3629== Command: ./test-eval inp.9.txt
==3629== Parent PID: 3628
==3629== 
==3629== Invalid read of size 8
==3629==    at 0x40149B: card_ptr_comp (eval.c:9)
==3629==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3629==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3629==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3629==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3629==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3629==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3629==    by 0x4E7369E: qsort_r (msort.c:297)
==3629==    by 0x401BEF: sort_hand (eval.c:144)
==3629==    by 0x401C29: compare_hands (eval.c:149)
==3629==    by 0x402B7B: main (test-eval.c:124)
==3629==  Address 0x5206f28 is 0 bytes after a block of size 40 alloc'd
==3629==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==3629==    by 0x40104A: add_card_to (deck-c4.c:29)
==3629==    by 0x4033D3: hand_from_string (input.c:49)
==3629==    by 0x402B4F: main (test-eval.c:122)
==3629== 
==3629== Invalid read of size 4
==3629==    at 0x40149E: card_ptr_comp (eval.c:9)
==3629==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3629==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3629==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3629==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3629==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3629==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3629==    by 0x4E7369E: qsort_r (msort.c:297)
==3629==    by 0x401BEF: sort_hand (eval.c:144)
==3629==    by 0x401C29: compare_hands (eval.c:149)
==3629==    by 0x402B7B: main (test-eval.c:124)
==3629==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==3629== 
==3629== 
==3629== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==3629==  Access not within mapped region at address 0x0
==3629==    at 0x40149E: card_ptr_comp (eval.c:9)
==3629==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3629==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3629==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3629==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3629==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3629==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3629==    by 0x4E7369E: qsort_r (msort.c:297)
==3629==    by 0x401BEF: sort_hand (eval.c:144)
==3629==    by 0x401C29: compare_hands (eval.c:149)
==3629==    by 0x402B7B: main (test-eval.c:124)
==3629==  If you believe this happened as a result of a stack
==3629==  overflow in your program's main thread (unlikely but
==3629==  possible), you can try to increase the size of the
==3629==  main thread stack using the --main-stacksize= flag.
==3629==  The main thread stack size used in this run was 8388608.
==3629== 
==3629== HEAP SUMMARY:
==3629==     in use at exit: 864 bytes in 16 blocks
==3629==   total heap usage: 50 allocs, 34 frees, 9,608 bytes allocated
==3629== 
==3629== LEAK SUMMARY:
==3629==    definitely lost: 0 bytes in 0 blocks
==3629==    indirectly lost: 0 bytes in 0 blocks
==3629==      possibly lost: 0 bytes in 0 blocks
==3629==    still reachable: 864 bytes in 16 blocks
==3629==         suppressed: 0 bytes in 0 blocks
==3629== Rerun with --leak-check=full to see details of leaked memory
==3629== 
==3629== For counts of detected and suppressed errors, rerun with: -v
==3629== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==3634== Memcheck, a memory error detector
==3634== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3634== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3634== Command: ./test-eval inp.10.txt
==3634== Parent PID: 3633
==3634== 
==3634== Invalid read of size 8
==3634==    at 0x40149B: card_ptr_comp (eval.c:9)
==3634==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3634==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3634==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3634==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3634==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3634==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3634==    by 0x4E7369E: qsort_r (msort.c:297)
==3634==    by 0x401BEF: sort_hand (eval.c:144)
==3634==    by 0x401C29: compare_hands (eval.c:149)
==3634==    by 0x402B7B: main (test-eval.c:124)
==3634==  Address 0x5207230 is 0 bytes after a block of size 48 alloc'd
==3634==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==3634==    by 0x40104A: add_card_to (deck-c4.c:29)
==3634==    by 0x4033D3: hand_from_string (input.c:49)
==3634==    by 0x402B4F: main (test-eval.c:122)
==3634== 
==3634== Invalid read of size 4
==3634==    at 0x40149E: card_ptr_comp (eval.c:9)
==3634==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3634==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3634==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3634==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3634==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3634==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3634==    by 0x4E7369E: qsort_r (msort.c:297)
==3634==    by 0x401BEF: sort_hand (eval.c:144)
==3634==    by 0x401C29: compare_hands (eval.c:149)
==3634==    by 0x402B7B: main (test-eval.c:124)
==3634==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==3634== 
==3634== 
==3634== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==3634==  Access not within mapped region at address 0x0
==3634==    at 0x40149E: card_ptr_comp (eval.c:9)
==3634==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==3634==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3634==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3634==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==3634==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==3634==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==3634==    by 0x4E7369E: qsort_r (msort.c:297)
==3634==    by 0x401BEF: sort_hand (eval.c:144)
==3634==    by 0x401C29: compare_hands (eval.c:149)
==3634==    by 0x402B7B: main (test-eval.c:124)
==3634==  If you believe this happened as a result of a stack
==3634==  overflow in your program's main thread (unlikely but
==3634==  possible), you can try to increase the size of the
==3634==  main thread stack using the --main-stacksize= flag.
==3634==  The main thread stack size used in this run was 8388608.
==3634== 
==3634== HEAP SUMMARY:
==3634==     in use at exit: 896 bytes in 18 blocks
==3634==   total heap usage: 60 allocs, 42 frees, 9,888 bytes allocated
==3634== 
==3634== LEAK SUMMARY:
==3634==    definitely lost: 0 bytes in 0 blocks
==3634==    indirectly lost: 0 bytes in 0 blocks
==3634==      possibly lost: 0 bytes in 0 blocks
==3634==    still reachable: 896 bytes in 18 blocks
==3634==         suppressed: 0 bytes in 0 blocks
==3634== Rerun with --leak-check=full to see details of leaked memory
==3634== 
==3634== For counts of detected and suppressed errors, rerun with: -v
==3634== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
