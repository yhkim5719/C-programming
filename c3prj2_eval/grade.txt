Grading at Mon Jul  1 01:01:20 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==392== Memcheck, a memory error detector
==392== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==392== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==392== Command: ./test-eval inp.1.txt
==392== Parent PID: 391
==392== 
==392== Use of uninitialised value of size 8
==392==    at 0x4018F9: build_hand_from_match (eval.c:103)
==392==    by 0x4022DA: evaluate_hand (eval.c:273)
==392==    by 0x4026C2: describe_hand (test-eval.c:68)
==392==    by 0x4028ED: main (test-eval.c:116)
==392== 
==392== Conditional jump or move depends on uninitialised value(s)
==392==    at 0x400C61: deck_contains (deck.c:15)
==392==    by 0x401903: build_hand_from_match (eval.c:103)
==392==    by 0x4022DA: evaluate_hand (eval.c:273)
==392==    by 0x4026C2: describe_hand (test-eval.c:68)
==392==    by 0x4028ED: main (test-eval.c:116)
==392== 
==392== Invalid read of size 8
==392==    at 0x4018F9: build_hand_from_match (eval.c:103)
==392==    by 0x4022DA: evaluate_hand (eval.c:273)
==392==    by 0x4026C2: describe_hand (test-eval.c:68)
==392==    by 0x4028ED: main (test-eval.c:116)
==392==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==392== 
==392== 
==392== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==392==  Access not within mapped region at address 0x400001102
==392==    at 0x4018F9: build_hand_from_match (eval.c:103)
==392==    by 0x4022DA: evaluate_hand (eval.c:273)
==392==    by 0x4026C2: describe_hand (test-eval.c:68)
==392==    by 0x4028ED: main (test-eval.c:116)
==392==  If you believe this happened as a result of a stack
==392==  overflow in your program's main thread (unlikely but
==392==  possible), you can try to increase the size of the
==392==  main thread stack using the --main-stacksize= flag.
==392==  The main thread stack size used in this run was 8388608.
==392== 
==392== HEAP SUMMARY:
==392==     in use at exit: 896 bytes in 18 blocks
==392==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==392== 
==392== LEAK SUMMARY:
==392==    definitely lost: 0 bytes in 0 blocks
==392==    indirectly lost: 0 bytes in 0 blocks
==392==      possibly lost: 0 bytes in 0 blocks
==392==    still reachable: 896 bytes in 18 blocks
==392==         suppressed: 0 bytes in 0 blocks
==392== Rerun with --leak-check=full to see details of leaked memory
==392== 
==392== For counts of detected and suppressed errors, rerun with: -v
==392== Use --track-origins=yes to see where uninitialised values come from
==392== ERROR SUMMARY: 9 errors from 3 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==397== Memcheck, a memory error detector
==397== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==397== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==397== Command: ./test-eval inp.2.txt
==397== Parent PID: 396
==397== 
==397== Use of uninitialised value of size 8
==397==    at 0x4018F9: build_hand_from_match (eval.c:103)
==397==    by 0x4022B8: evaluate_hand (eval.c:271)
==397==    by 0x4026C2: describe_hand (test-eval.c:68)
==397==    by 0x4028ED: main (test-eval.c:116)
==397== 
==397== Invalid read of size 8
==397==    at 0x4018F9: build_hand_from_match (eval.c:103)
==397==    by 0x4022B8: evaluate_hand (eval.c:271)
==397==    by 0x4026C2: describe_hand (test-eval.c:68)
==397==    by 0x4028ED: main (test-eval.c:116)
==397==  Address 0x5206c70 is 0 bytes inside a block of size 24 free'd
==397==    at 0x4C2EDEB: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==397==    by 0x401F07: evaluate_hand (eval.c:222)
==397==    by 0x4026C2: describe_hand (test-eval.c:68)
==397==    by 0x4028ED: main (test-eval.c:116)
==397==  Block was alloc'd at
==397==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==397==    by 0x4013B4: get_match_counts (eval-c4.c:70)
==397==    by 0x401E85: evaluate_hand (eval.c:217)
==397==    by 0x4026C2: describe_hand (test-eval.c:68)
==397==    by 0x4028ED: main (test-eval.c:116)
==397== 
==397== 
==397== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==397==  Access not within mapped region at address 0x0
==397==    at 0x4018F9: build_hand_from_match (eval.c:103)
==397==    by 0x4022B8: evaluate_hand (eval.c:271)
==397==    by 0x4026C2: describe_hand (test-eval.c:68)
==397==    by 0x4028ED: main (test-eval.c:116)
==397==  If you believe this happened as a result of a stack
==397==  overflow in your program's main thread (unlikely but
==397==  possible), you can try to increase the size of the
==397==  main thread stack using the --main-stacksize= flag.
==397==  The main thread stack size used in this run was 8388608.
==397== 
==397== HEAP SUMMARY:
==397==     in use at exit: 880 bytes in 17 blocks
==397==   total heap usage: 30 allocs, 13 frees, 9,320 bytes allocated
==397== 
==397== LEAK SUMMARY:
==397==    definitely lost: 0 bytes in 0 blocks
==397==    indirectly lost: 0 bytes in 0 blocks
==397==      possibly lost: 0 bytes in 0 blocks
==397==    still reachable: 880 bytes in 17 blocks
==397==         suppressed: 0 bytes in 0 blocks
==397== Rerun with --leak-check=full to see details of leaked memory
==397== 
==397== For counts of detected and suppressed errors, rerun with: -v
==397== Use --track-origins=yes to see where uninitialised values come from
==397== ERROR SUMMARY: 5 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==402== Memcheck, a memory error detector
==402== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==402== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==402== Command: ./test-eval inp.3.txt
==402== Parent PID: 401
==402== 
==402== Use of uninitialised value of size 8
==402==    at 0x4018F9: build_hand_from_match (eval.c:103)
==402==    by 0x4021A6: evaluate_hand (eval.c:255)
==402==    by 0x4026C2: describe_hand (test-eval.c:68)
==402==    by 0x4028ED: main (test-eval.c:116)
==402== 
==402== Invalid read of size 8
==402==    at 0x4018F9: build_hand_from_match (eval.c:103)
==402==    by 0x4021A6: evaluate_hand (eval.c:255)
==402==    by 0x4026C2: describe_hand (test-eval.c:68)
==402==    by 0x4028ED: main (test-eval.c:116)
==402==  Address 0x5206bb0 is 0 bytes inside a block of size 20 free'd
==402==    at 0x4C2EDEB: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==402==    by 0x401F07: evaluate_hand (eval.c:222)
==402==    by 0x4026C2: describe_hand (test-eval.c:68)
==402==    by 0x4028ED: main (test-eval.c:116)
==402==  Block was alloc'd at
==402==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==402==    by 0x4013B4: get_match_counts (eval-c4.c:70)
==402==    by 0x401E85: evaluate_hand (eval.c:217)
==402==    by 0x4026C2: describe_hand (test-eval.c:68)
==402==    by 0x4028ED: main (test-eval.c:116)
==402== 
==402== 
==402== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==402==  Access not within mapped region at address 0x0
==402==    at 0x4018F9: build_hand_from_match (eval.c:103)
==402==    by 0x4021A6: evaluate_hand (eval.c:255)
==402==    by 0x4026C2: describe_hand (test-eval.c:68)
==402==    by 0x4028ED: main (test-eval.c:116)
==402==  If you believe this happened as a result of a stack
==402==  overflow in your program's main thread (unlikely but
==402==  possible), you can try to increase the size of the
==402==  main thread stack using the --main-stacksize= flag.
==402==  The main thread stack size used in this run was 8388608.
==402== 
==402== HEAP SUMMARY:
==402==     in use at exit: 864 bytes in 16 blocks
==402==   total heap usage: 28 allocs, 12 frees, 9,256 bytes allocated
==402== 
==402== LEAK SUMMARY:
==402==    definitely lost: 0 bytes in 0 blocks
==402==    indirectly lost: 0 bytes in 0 blocks
==402==      possibly lost: 0 bytes in 0 blocks
==402==    still reachable: 864 bytes in 16 blocks
==402==         suppressed: 0 bytes in 0 blocks
==402== Rerun with --leak-check=full to see details of leaked memory
==402== 
==402== For counts of detected and suppressed errors, rerun with: -v
==402== Use --track-origins=yes to see where uninitialised values come from
==402== ERROR SUMMARY: 5 errors from 2 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==407== Memcheck, a memory error detector
==407== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==407== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==407== Command: ./test-eval inp.4.txt
==407== Parent PID: 406
==407== 
==407== Use of uninitialised value of size 8
==407==    at 0x4018F9: build_hand_from_match (eval.c:103)
==407==    by 0x402153: evaluate_hand (eval.c:251)
==407==    by 0x4026C2: describe_hand (test-eval.c:68)
==407==    by 0x4028ED: main (test-eval.c:116)
==407== 
==407== Invalid read of size 8
==407==    at 0x4018F9: build_hand_from_match (eval.c:103)
==407==    by 0x402153: evaluate_hand (eval.c:251)
==407==    by 0x4026C2: describe_hand (test-eval.c:68)
==407==    by 0x4028ED: main (test-eval.c:116)
==407==  Address 0x5206d30 is 0 bytes inside a block of size 24 free'd
==407==    at 0x4C2EDEB: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==407==    by 0x401F07: evaluate_hand (eval.c:222)
==407==    by 0x4026C2: describe_hand (test-eval.c:68)
==407==    by 0x4028ED: main (test-eval.c:116)
==407==  Block was alloc'd at
==407==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==407==    by 0x4013B4: get_match_counts (eval-c4.c:70)
==407==    by 0x401E85: evaluate_hand (eval.c:217)
==407==    by 0x4026C2: describe_hand (test-eval.c:68)
==407==    by 0x4028ED: main (test-eval.c:116)
==407== 
==407== 
==407== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==407==  Access not within mapped region at address 0x0
==407==    at 0x4018F9: build_hand_from_match (eval.c:103)
==407==    by 0x402153: evaluate_hand (eval.c:251)
==407==    by 0x4026C2: describe_hand (test-eval.c:68)
==407==    by 0x4028ED: main (test-eval.c:116)
==407==  If you believe this happened as a result of a stack
==407==  overflow in your program's main thread (unlikely but
==407==  possible), you can try to increase the size of the
==407==  main thread stack using the --main-stacksize= flag.
==407==  The main thread stack size used in this run was 8388608.
==407== 
==407== HEAP SUMMARY:
==407==     in use at exit: 896 bytes in 18 blocks
==407==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==407== 
==407== LEAK SUMMARY:
==407==    definitely lost: 0 bytes in 0 blocks
==407==    indirectly lost: 0 bytes in 0 blocks
==407==      possibly lost: 0 bytes in 0 blocks
==407==    still reachable: 896 bytes in 18 blocks
==407==         suppressed: 0 bytes in 0 blocks
==407== Rerun with --leak-check=full to see details of leaked memory
==407== 
==407== For counts of detected and suppressed errors, rerun with: -v
==407== Use --track-origins=yes to see where uninitialised values come from
==407== ERROR SUMMARY: 4 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==412== Memcheck, a memory error detector
==412== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==412== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==412== Command: ./test-eval inp.5.txt
==412== Parent PID: 411
==412== 
==412== Use of uninitialised value of size 8
==412==    at 0x4018F9: build_hand_from_match (eval.c:103)
==412==    by 0x4022DA: evaluate_hand (eval.c:273)
==412==    by 0x4026C2: describe_hand (test-eval.c:68)
==412==    by 0x4028ED: main (test-eval.c:116)
==412== 
==412== Conditional jump or move depends on uninitialised value(s)
==412==    at 0x400C61: deck_contains (deck.c:15)
==412==    by 0x401903: build_hand_from_match (eval.c:103)
==412==    by 0x4022DA: evaluate_hand (eval.c:273)
==412==    by 0x4026C2: describe_hand (test-eval.c:68)
==412==    by 0x4028ED: main (test-eval.c:116)
==412== 
==412== Invalid read of size 8
==412==    at 0x4018F9: build_hand_from_match (eval.c:103)
==412==    by 0x4022DA: evaluate_hand (eval.c:273)
==412==    by 0x4026C2: describe_hand (test-eval.c:68)
==412==    by 0x4028ED: main (test-eval.c:116)
==412==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==412== 
==412== 
==412== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==412==  Access not within mapped region at address 0x400001102
==412==    at 0x4018F9: build_hand_from_match (eval.c:103)
==412==    by 0x4022DA: evaluate_hand (eval.c:273)
==412==    by 0x4026C2: describe_hand (test-eval.c:68)
==412==    by 0x4028ED: main (test-eval.c:116)
==412==  If you believe this happened as a result of a stack
==412==  overflow in your program's main thread (unlikely but
==412==  possible), you can try to increase the size of the
==412==  main thread stack using the --main-stacksize= flag.
==412==  The main thread stack size used in this run was 8388608.
==412== 
==412== HEAP SUMMARY:
==412==     in use at exit: 864 bytes in 16 blocks
==412==   total heap usage: 28 allocs, 12 frees, 9,256 bytes allocated
==412== 
==412== LEAK SUMMARY:
==412==    definitely lost: 0 bytes in 0 blocks
==412==    indirectly lost: 0 bytes in 0 blocks
==412==      possibly lost: 0 bytes in 0 blocks
==412==    still reachable: 864 bytes in 16 blocks
==412==         suppressed: 0 bytes in 0 blocks
==412== Rerun with --leak-check=full to see details of leaked memory
==412== 
==412== For counts of detected and suppressed errors, rerun with: -v
==412== Use --track-origins=yes to see where uninitialised values come from
==412== ERROR SUMMARY: 8 errors from 3 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
Valgrind returned an error status
==417== Memcheck, a memory error detector
==417== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==417== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==417== Command: ./test-eval inp.6.txt
==417== Parent PID: 416
==417== 
==417== Invalid read of size 8
==417==    at 0x401472: card_ptr_comp (eval.c:9)
==417==    by 0x4E72FF0: msort_with_tmp.part.0 (msort.c:105)
==417==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==417==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==417==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==417==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==417==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==417==    by 0x4E7369E: qsort_r (msort.c:297)
==417==    by 0x4019BE: sort_hand (eval.c:113)
==417==    by 0x4019F8: compare_hands (eval.c:118)
==417==    by 0x402962: main (test-eval.c:124)
==417==  Address 0x5206e60 is 0 bytes after a block of size 16 alloc'd
==417==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==417==    by 0x402F1E: hand_from_string (input.c:12)
==417==    by 0x402936: main (test-eval.c:122)
==417== 
==417== Invalid read of size 4
==417==    at 0x401475: card_ptr_comp (eval.c:9)
==417==    by 0x4E72FF0: msort_with_tmp.part.0 (msort.c:105)
==417==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==417==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==417==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==417==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==417==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==417==    by 0x4E7369E: qsort_r (msort.c:297)
==417==    by 0x4019BE: sort_hand (eval.c:113)
==417==    by 0x4019F8: compare_hands (eval.c:118)
==417==    by 0x402962: main (test-eval.c:124)
==417==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==417== 
==417== 
==417== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==417==  Access not within mapped region at address 0x0
==417==    at 0x401475: card_ptr_comp (eval.c:9)
==417==    by 0x4E72FF0: msort_with_tmp.part.0 (msort.c:105)
==417==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==417==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==417==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==417==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==417==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==417==    by 0x4E7369E: qsort_r (msort.c:297)
==417==    by 0x4019BE: sort_hand (eval.c:113)
==417==    by 0x4019F8: compare_hands (eval.c:118)
==417==    by 0x402962: main (test-eval.c:124)
==417==  If you believe this happened as a result of a stack
==417==  overflow in your program's main thread (unlikely but
==417==  possible), you can try to increase the size of the
==417==  main thread stack using the --main-stacksize= flag.
==417==  The main thread stack size used in this run was 8388608.
==417== 
==417== HEAP SUMMARY:
==417==     in use at exit: 896 bytes in 18 blocks
==417==   total heap usage: 60 allocs, 42 frees, 9,888 bytes allocated
==417== 
==417== LEAK SUMMARY:
==417==    definitely lost: 0 bytes in 0 blocks
==417==    indirectly lost: 0 bytes in 0 blocks
==417==      possibly lost: 0 bytes in 0 blocks
==417==    still reachable: 896 bytes in 18 blocks
==417==         suppressed: 0 bytes in 0 blocks
==417== Rerun with --leak-check=full to see details of leaked memory
==417== 
==417== For counts of detected and suppressed errors, rerun with: -v
==417== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==422== Memcheck, a memory error detector
==422== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==422== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==422== Command: ./test-eval inp.7.txt
==422== Parent PID: 421
==422== 
==422== Use of uninitialised value of size 8
==422==    at 0x4018F9: build_hand_from_match (eval.c:103)
==422==    by 0x401F6C: evaluate_hand (eval.c:227)
==422==    by 0x4026C2: describe_hand (test-eval.c:68)
==422==    by 0x4028ED: main (test-eval.c:116)
==422== 
==422== Invalid read of size 8
==422==    at 0x4018F9: build_hand_from_match (eval.c:103)
==422==    by 0x401F6C: evaluate_hand (eval.c:227)
==422==    by 0x4026C2: describe_hand (test-eval.c:68)
==422==    by 0x4028ED: main (test-eval.c:116)
==422==  Address 0x5206ed0 is 0 bytes inside a block of size 28 free'd
==422==    at 0x4C2EDEB: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==422==    by 0x401F07: evaluate_hand (eval.c:222)
==422==    by 0x4026C2: describe_hand (test-eval.c:68)
==422==    by 0x4028ED: main (test-eval.c:116)
==422==  Block was alloc'd at
==422==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==422==    by 0x4013B4: get_match_counts (eval-c4.c:70)
==422==    by 0x401E85: evaluate_hand (eval.c:217)
==422==    by 0x4026C2: describe_hand (test-eval.c:68)
==422==    by 0x4028ED: main (test-eval.c:116)
==422== 
==422== 
==422== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==422==  Access not within mapped region at address 0x0
==422==    at 0x4018F9: build_hand_from_match (eval.c:103)
==422==    by 0x401F6C: evaluate_hand (eval.c:227)
==422==    by 0x4026C2: describe_hand (test-eval.c:68)
==422==    by 0x4028ED: main (test-eval.c:116)
==422==  If you believe this happened as a result of a stack
==422==  overflow in your program's main thread (unlikely but
==422==  possible), you can try to increase the size of the
==422==  main thread stack using the --main-stacksize= flag.
==422==  The main thread stack size used in this run was 8388608.
==422== 
==422== HEAP SUMMARY:
==422==     in use at exit: 928 bytes in 20 blocks
==422==   total heap usage: 36 allocs, 16 frees, 9,512 bytes allocated
==422== 
==422== LEAK SUMMARY:
==422==    definitely lost: 0 bytes in 0 blocks
==422==    indirectly lost: 0 bytes in 0 blocks
==422==      possibly lost: 0 bytes in 0 blocks
==422==    still reachable: 928 bytes in 20 blocks
==422==         suppressed: 0 bytes in 0 blocks
==422== Rerun with --leak-check=full to see details of leaked memory
==422== 
==422== For counts of detected and suppressed errors, rerun with: -v
==422== Use --track-origins=yes to see where uninitialised values come from
==422== ERROR SUMMARY: 4 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==427== Memcheck, a memory error detector
==427== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==427== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==427== Command: ./test-eval inp.8.txt
==427== Parent PID: 426
==427== 
==427== Use of uninitialised value of size 8
==427==    at 0x400C02: print_hand (deck.c:8)
==427==    by 0x40270D: describe_hand (test-eval.c:74)
==427==    by 0x4028ED: main (test-eval.c:116)
==427== 
==427== Invalid read of size 8
==427==    at 0x400C02: print_hand (deck.c:8)
==427==    by 0x40270D: describe_hand (test-eval.c:74)
==427==    by 0x4028ED: main (test-eval.c:116)
==427==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==427== 
==427== 
==427== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==427==  Access not within mapped region at address 0x0
==427==    at 0x400C02: print_hand (deck.c:8)
==427==    by 0x40270D: describe_hand (test-eval.c:74)
==427==    by 0x4028ED: main (test-eval.c:116)
==427==  If you believe this happened as a result of a stack
==427==  overflow in your program's main thread (unlikely but
==427==  possible), you can try to increase the size of the
==427==  main thread stack using the --main-stacksize= flag.
==427==  The main thread stack size used in this run was 8388608.
==427== 
==427== HEAP SUMMARY:
==427==     in use at exit: 896 bytes in 18 blocks
==427==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==427== 
==427== LEAK SUMMARY:
==427==    definitely lost: 0 bytes in 0 blocks
==427==    indirectly lost: 0 bytes in 0 blocks
==427==      possibly lost: 0 bytes in 0 blocks
==427==    still reachable: 896 bytes in 18 blocks
==427==         suppressed: 0 bytes in 0 blocks
==427== Rerun with --leak-check=full to see details of leaked memory
==427== 
==427== For counts of detected and suppressed errors, rerun with: -v
==427== Use --track-origins=yes to see where uninitialised values come from
==427== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
Valgrind returned an error status
==432== Memcheck, a memory error detector
==432== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==432== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==432== Command: ./test-eval inp.9.txt
==432== Parent PID: 431
==432== 
==432== Invalid read of size 8
==432==    at 0x40147B: card_ptr_comp (eval.c:9)
==432==    by 0x4E72FF0: msort_with_tmp.part.0 (msort.c:105)
==432==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==432==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==432==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==432==    by 0x4E7369E: qsort_r (msort.c:297)
==432==    by 0x4019BE: sort_hand (eval.c:113)
==432==    by 0x4019F8: compare_hands (eval.c:118)
==432==    by 0x402962: main (test-eval.c:124)
==432==  Address 0x5206ce0 is 0 bytes after a block of size 16 alloc'd
==432==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==432==    by 0x402F1E: hand_from_string (input.c:12)
==432==    by 0x402936: main (test-eval.c:122)
==432== 
==432== Invalid read of size 4
==432==    at 0x40147E: card_ptr_comp (eval.c:9)
==432==    by 0x4E72FF0: msort_with_tmp.part.0 (msort.c:105)
==432==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==432==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==432==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==432==    by 0x4E7369E: qsort_r (msort.c:297)
==432==    by 0x4019BE: sort_hand (eval.c:113)
==432==    by 0x4019F8: compare_hands (eval.c:118)
==432==    by 0x402962: main (test-eval.c:124)
==432==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==432== 
==432== 
==432== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==432==  Access not within mapped region at address 0x0
==432==    at 0x40147E: card_ptr_comp (eval.c:9)
==432==    by 0x4E72FF0: msort_with_tmp.part.0 (msort.c:105)
==432==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==432==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==432==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==432==    by 0x4E7369E: qsort_r (msort.c:297)
==432==    by 0x4019BE: sort_hand (eval.c:113)
==432==    by 0x4019F8: compare_hands (eval.c:118)
==432==    by 0x402962: main (test-eval.c:124)
==432==  If you believe this happened as a result of a stack
==432==  overflow in your program's main thread (unlikely but
==432==  possible), you can try to increase the size of the
==432==  main thread stack using the --main-stacksize= flag.
==432==  The main thread stack size used in this run was 8388608.
==432== 
==432== HEAP SUMMARY:
==432==     in use at exit: 864 bytes in 16 blocks
==432==   total heap usage: 52 allocs, 36 frees, 9,648 bytes allocated
==432== 
==432== LEAK SUMMARY:
==432==    definitely lost: 0 bytes in 0 blocks
==432==    indirectly lost: 0 bytes in 0 blocks
==432==      possibly lost: 0 bytes in 0 blocks
==432==    still reachable: 864 bytes in 16 blocks
==432==         suppressed: 0 bytes in 0 blocks
==432== Rerun with --leak-check=full to see details of leaked memory
==432== 
==432== For counts of detected and suppressed errors, rerun with: -v
==432== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==437== Memcheck, a memory error detector
==437== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==437== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==437== Command: ./test-eval inp.10.txt
==437== Parent PID: 436
==437== 
==437== Use of uninitialised value of size 8
==437==    at 0x400C02: print_hand (deck.c:8)
==437==    by 0x40270D: describe_hand (test-eval.c:74)
==437==    by 0x40290D: main (test-eval.c:119)
==437== 
==437== Invalid read of size 8
==437==    at 0x400C02: print_hand (deck.c:8)
==437==    by 0x40270D: describe_hand (test-eval.c:74)
==437==    by 0x40290D: main (test-eval.c:119)
==437==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==437== 
==437== 
==437== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==437==  Access not within mapped region at address 0x0
==437==    at 0x400C02: print_hand (deck.c:8)
==437==    by 0x40270D: describe_hand (test-eval.c:74)
==437==    by 0x40290D: main (test-eval.c:119)
==437==  If you believe this happened as a result of a stack
==437==  overflow in your program's main thread (unlikely but
==437==  possible), you can try to increase the size of the
==437==  main thread stack using the --main-stacksize= flag.
==437==  The main thread stack size used in this run was 8388608.
==437== 
==437== HEAP SUMMARY:
==437==     in use at exit: 896 bytes in 18 blocks
==437==   total heap usage: 34 allocs, 16 frees, 9,424 bytes allocated
==437== 
==437== LEAK SUMMARY:
==437==    definitely lost: 0 bytes in 0 blocks
==437==    indirectly lost: 0 bytes in 0 blocks
==437==      possibly lost: 0 bytes in 0 blocks
==437==    still reachable: 896 bytes in 18 blocks
==437==         suppressed: 0 bytes in 0 blocks
==437== Rerun with --leak-check=full to see details of leaked memory
==437== 
==437== For counts of detected and suppressed errors, rerun with: -v
==437== Use --track-origins=yes to see where uninitialised values come from
==437== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
