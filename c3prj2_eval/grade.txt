Grading at Sun Jul  7 21:29:39 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==3778== Memcheck, a memory error detector
==3778== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3778== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3778== Command: ./test-eval inp.2.txt
==3778== Parent PID: 3777
==3778== 
==3778== Use of uninitialised value of size 8
==3778==    at 0x400C02: print_hand (deck.c:7)
==3778==    by 0x402922: describe_hand (test-eval.c:74)
==3778==    by 0x402B22: main (test-eval.c:119)
==3778== 
==3778== Invalid read of size 8
==3778==    at 0x400C02: print_hand (deck.c:7)
==3778==    by 0x402922: describe_hand (test-eval.c:74)
==3778==    by 0x402B22: main (test-eval.c:119)
==3778==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==3778== 
==3778== 
==3778== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==3778==  Access not within mapped region at address 0x0
==3778==    at 0x400C02: print_hand (deck.c:7)
==3778==    by 0x402922: describe_hand (test-eval.c:74)
==3778==    by 0x402B22: main (test-eval.c:119)
==3778==  If you believe this happened as a result of a stack
==3778==  overflow in your program's main thread (unlikely but
==3778==  possible), you can try to increase the size of the
==3778==  main thread stack using the --main-stacksize= flag.
==3778==  The main thread stack size used in this run was 8388608.
==3778== 
==3778== HEAP SUMMARY:
==3778==     in use at exit: 896 bytes in 18 blocks
==3778==   total heap usage: 146 allocs, 128 frees, 11,444 bytes allocated
==3778== 
==3778== LEAK SUMMARY:
==3778==    definitely lost: 0 bytes in 0 blocks
==3778==    indirectly lost: 0 bytes in 0 blocks
==3778==      possibly lost: 0 bytes in 0 blocks
==3778==    still reachable: 896 bytes in 18 blocks
==3778==         suppressed: 0 bytes in 0 blocks
==3778== Rerun with --leak-check=full to see details of leaked memory
==3778== 
==3778== For counts of detected and suppressed errors, rerun with: -v
==3778== Use --track-origins=yes to see where uninitialised values come from
==3778== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==3795== Memcheck, a memory error detector
==3795== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3795== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3795== Command: ./test-eval inp.4.txt
==3795== Parent PID: 3794
==3795== 
==3795== Use of uninitialised value of size 8
==3795==    at 0x400C02: print_hand (deck.c:7)
==3795==    by 0x402922: describe_hand (test-eval.c:74)
==3795==    by 0x402B02: main (test-eval.c:116)
==3795== 
==3795== Invalid read of size 8
==3795==    at 0x400C02: print_hand (deck.c:7)
==3795==    by 0x402922: describe_hand (test-eval.c:74)
==3795==    by 0x402B02: main (test-eval.c:116)
==3795==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==3795== 
==3795== 
==3795== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==3795==  Access not within mapped region at address 0x0
==3795==    at 0x400C02: print_hand (deck.c:7)
==3795==    by 0x402922: describe_hand (test-eval.c:74)
==3795==    by 0x402B02: main (test-eval.c:116)
==3795==  If you believe this happened as a result of a stack
==3795==  overflow in your program's main thread (unlikely but
==3795==  possible), you can try to increase the size of the
==3795==  main thread stack using the --main-stacksize= flag.
==3795==  The main thread stack size used in this run was 8388608.
==3795== 
==3795== HEAP SUMMARY:
==3795==     in use at exit: 896 bytes in 18 blocks
==3795==   total heap usage: 264 allocs, 246 frees, 13,664 bytes allocated
==3795== 
==3795== LEAK SUMMARY:
==3795==    definitely lost: 0 bytes in 0 blocks
==3795==    indirectly lost: 0 bytes in 0 blocks
==3795==      possibly lost: 0 bytes in 0 blocks
==3795==    still reachable: 896 bytes in 18 blocks
==3795==         suppressed: 0 bytes in 0 blocks
==3795== Rerun with --leak-check=full to see details of leaked memory
==3795== 
==3795== For counts of detected and suppressed errors, rerun with: -v
==3795== Use --track-origins=yes to see where uninitialised values come from
==3795== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==3836== Memcheck, a memory error detector
==3836== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3836== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3836== Command: ./test-eval inp.8.txt
==3836== Parent PID: 3835
==3836== 
==3836== Use of uninitialised value of size 8
==3836==    at 0x400C02: print_hand (deck.c:7)
==3836==    by 0x402922: describe_hand (test-eval.c:74)
==3836==    by 0x402B22: main (test-eval.c:119)
==3836== 
==3836== Invalid read of size 8
==3836==    at 0x400C02: print_hand (deck.c:7)
==3836==    by 0x402922: describe_hand (test-eval.c:74)
==3836==    by 0x402B22: main (test-eval.c:119)
==3836==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==3836== 
==3836== 
==3836== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==3836==  Access not within mapped region at address 0x0
==3836==    at 0x400C02: print_hand (deck.c:7)
==3836==    by 0x402922: describe_hand (test-eval.c:74)
==3836==    by 0x402B22: main (test-eval.c:119)
==3836==  If you believe this happened as a result of a stack
==3836==  overflow in your program's main thread (unlikely but
==3836==  possible), you can try to increase the size of the
==3836==  main thread stack using the --main-stacksize= flag.
==3836==  The main thread stack size used in this run was 8388608.
==3836== 
==3836== HEAP SUMMARY:
==3836==     in use at exit: 896 bytes in 18 blocks
==3836==   total heap usage: 208 allocs, 190 frees, 12,640 bytes allocated
==3836== 
==3836== LEAK SUMMARY:
==3836==    definitely lost: 0 bytes in 0 blocks
==3836==    indirectly lost: 0 bytes in 0 blocks
==3836==      possibly lost: 0 bytes in 0 blocks
==3836==    still reachable: 896 bytes in 18 blocks
==3836==         suppressed: 0 bytes in 0 blocks
==3836== Rerun with --leak-check=full to see details of leaked memory
==3836== 
==3836== For counts of detected and suppressed errors, rerun with: -v
==3836== Use --track-origins=yes to see where uninitialised values come from
==3836== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 10: Trying each type of hand ranking
 Checking the output 
Your file matched the expected output
 - Testcase passed

Overall Grade: C
