Grading at Sun Jul  7 21:10:19 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==1765== Memcheck, a memory error detector
==1765== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1765== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1765== Command: ./test-eval inp.2.txt
==1765== Parent PID: 1764
==1765== 
==1765== Use of uninitialised value of size 8
==1765==    at 0x400C02: print_hand (deck.c:7)
==1765==    by 0x4028D3: describe_hand (test-eval.c:74)
==1765==    by 0x402AD3: main (test-eval.c:119)
==1765== 
==1765== Invalid read of size 8
==1765==    at 0x400C02: print_hand (deck.c:7)
==1765==    by 0x4028D3: describe_hand (test-eval.c:74)
==1765==    by 0x402AD3: main (test-eval.c:119)
==1765==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1765== 
==1765== 
==1765== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1765==  Access not within mapped region at address 0x0
==1765==    at 0x400C02: print_hand (deck.c:7)
==1765==    by 0x4028D3: describe_hand (test-eval.c:74)
==1765==    by 0x402AD3: main (test-eval.c:119)
==1765==  If you believe this happened as a result of a stack
==1765==  overflow in your program's main thread (unlikely but
==1765==  possible), you can try to increase the size of the
==1765==  main thread stack using the --main-stacksize= flag.
==1765==  The main thread stack size used in this run was 8388608.
==1765== 
==1765== HEAP SUMMARY:
==1765==     in use at exit: 896 bytes in 18 blocks
==1765==   total heap usage: 146 allocs, 128 frees, 11,444 bytes allocated
==1765== 
==1765== LEAK SUMMARY:
==1765==    definitely lost: 0 bytes in 0 blocks
==1765==    indirectly lost: 0 bytes in 0 blocks
==1765==      possibly lost: 0 bytes in 0 blocks
==1765==    still reachable: 896 bytes in 18 blocks
==1765==         suppressed: 0 bytes in 0 blocks
==1765== Rerun with --leak-check=full to see details of leaked memory
==1765== 
==1765== For counts of detected and suppressed errors, rerun with: -v
==1765== Use --track-origins=yes to see where uninitialised values come from
==1765== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==1782== Memcheck, a memory error detector
==1782== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1782== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1782== Command: ./test-eval inp.4.txt
==1782== Parent PID: 1781
==1782== 
==1782== Use of uninitialised value of size 8
==1782==    at 0x400C02: print_hand (deck.c:7)
==1782==    by 0x4028D3: describe_hand (test-eval.c:74)
==1782==    by 0x402AB3: main (test-eval.c:116)
==1782== 
==1782== Invalid read of size 8
==1782==    at 0x400C02: print_hand (deck.c:7)
==1782==    by 0x4028D3: describe_hand (test-eval.c:74)
==1782==    by 0x402AB3: main (test-eval.c:116)
==1782==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1782== 
==1782== 
==1782== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1782==  Access not within mapped region at address 0x0
==1782==    at 0x400C02: print_hand (deck.c:7)
==1782==    by 0x4028D3: describe_hand (test-eval.c:74)
==1782==    by 0x402AB3: main (test-eval.c:116)
==1782==  If you believe this happened as a result of a stack
==1782==  overflow in your program's main thread (unlikely but
==1782==  possible), you can try to increase the size of the
==1782==  main thread stack using the --main-stacksize= flag.
==1782==  The main thread stack size used in this run was 8388608.
==1782== 
==1782== HEAP SUMMARY:
==1782==     in use at exit: 896 bytes in 18 blocks
==1782==   total heap usage: 264 allocs, 246 frees, 13,664 bytes allocated
==1782== 
==1782== LEAK SUMMARY:
==1782==    definitely lost: 0 bytes in 0 blocks
==1782==    indirectly lost: 0 bytes in 0 blocks
==1782==      possibly lost: 0 bytes in 0 blocks
==1782==    still reachable: 896 bytes in 18 blocks
==1782==         suppressed: 0 bytes in 0 blocks
==1782== Rerun with --leak-check=full to see details of leaked memory
==1782== 
==1782== For counts of detected and suppressed errors, rerun with: -v
==1782== Use --track-origins=yes to see where uninitialised values come from
==1782== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==1823== Memcheck, a memory error detector
==1823== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1823== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1823== Command: ./test-eval inp.8.txt
==1823== Parent PID: 1822
==1823== 
==1823== Use of uninitialised value of size 8
==1823==    at 0x400C02: print_hand (deck.c:7)
==1823==    by 0x4028D3: describe_hand (test-eval.c:74)
==1823==    by 0x402AD3: main (test-eval.c:119)
==1823== 
==1823== Invalid read of size 8
==1823==    at 0x400C02: print_hand (deck.c:7)
==1823==    by 0x4028D3: describe_hand (test-eval.c:74)
==1823==    by 0x402AD3: main (test-eval.c:119)
==1823==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1823== 
==1823== 
==1823== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1823==  Access not within mapped region at address 0x0
==1823==    at 0x400C02: print_hand (deck.c:7)
==1823==    by 0x4028D3: describe_hand (test-eval.c:74)
==1823==    by 0x402AD3: main (test-eval.c:119)
==1823==  If you believe this happened as a result of a stack
==1823==  overflow in your program's main thread (unlikely but
==1823==  possible), you can try to increase the size of the
==1823==  main thread stack using the --main-stacksize= flag.
==1823==  The main thread stack size used in this run was 8388608.
==1823== 
==1823== HEAP SUMMARY:
==1823==     in use at exit: 896 bytes in 18 blocks
==1823==   total heap usage: 208 allocs, 190 frees, 12,640 bytes allocated
==1823== 
==1823== LEAK SUMMARY:
==1823==    definitely lost: 0 bytes in 0 blocks
==1823==    indirectly lost: 0 bytes in 0 blocks
==1823==      possibly lost: 0 bytes in 0 blocks
==1823==    still reachable: 896 bytes in 18 blocks
==1823==         suppressed: 0 bytes in 0 blocks
==1823== Rerun with --leak-check=full to see details of leaked memory
==1823== 
==1823== For counts of detected and suppressed errors, rerun with: -v
==1823== Use --track-origins=yes to see where uninitialised values come from
==1823== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 10: Trying each type of hand ranking
 Checking the output 
Your file matched the expected output
 - Testcase passed

Overall Grade: C
