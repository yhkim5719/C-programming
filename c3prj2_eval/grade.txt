Grading at Sun Jul  7 21:08:27 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==1536== Memcheck, a memory error detector
==1536== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1536== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1536== Command: ./test-eval inp.2.txt
==1536== Parent PID: 1535
==1536== 
==1536== Use of uninitialised value of size 8
==1536==    at 0x400C02: print_hand (deck.c:7)
==1536==    by 0x4028D3: describe_hand (test-eval.c:74)
==1536==    by 0x402AD3: main (test-eval.c:119)
==1536== 
==1536== Invalid read of size 8
==1536==    at 0x400C02: print_hand (deck.c:7)
==1536==    by 0x4028D3: describe_hand (test-eval.c:74)
==1536==    by 0x402AD3: main (test-eval.c:119)
==1536==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1536== 
==1536== 
==1536== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1536==  Access not within mapped region at address 0x0
==1536==    at 0x400C02: print_hand (deck.c:7)
==1536==    by 0x4028D3: describe_hand (test-eval.c:74)
==1536==    by 0x402AD3: main (test-eval.c:119)
==1536==  If you believe this happened as a result of a stack
==1536==  overflow in your program's main thread (unlikely but
==1536==  possible), you can try to increase the size of the
==1536==  main thread stack using the --main-stacksize= flag.
==1536==  The main thread stack size used in this run was 8388608.
==1536== 
==1536== HEAP SUMMARY:
==1536==     in use at exit: 896 bytes in 18 blocks
==1536==   total heap usage: 146 allocs, 128 frees, 11,444 bytes allocated
==1536== 
==1536== LEAK SUMMARY:
==1536==    definitely lost: 0 bytes in 0 blocks
==1536==    indirectly lost: 0 bytes in 0 blocks
==1536==      possibly lost: 0 bytes in 0 blocks
==1536==    still reachable: 896 bytes in 18 blocks
==1536==         suppressed: 0 bytes in 0 blocks
==1536== Rerun with --leak-check=full to see details of leaked memory
==1536== 
==1536== For counts of detected and suppressed errors, rerun with: -v
==1536== Use --track-origins=yes to see where uninitialised values come from
==1536== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==1553== Memcheck, a memory error detector
==1553== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1553== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1553== Command: ./test-eval inp.4.txt
==1553== Parent PID: 1552
==1553== 
==1553== Use of uninitialised value of size 8
==1553==    at 0x400C02: print_hand (deck.c:7)
==1553==    by 0x4028D3: describe_hand (test-eval.c:74)
==1553==    by 0x402AB3: main (test-eval.c:116)
==1553== 
==1553== Invalid read of size 8
==1553==    at 0x400C02: print_hand (deck.c:7)
==1553==    by 0x4028D3: describe_hand (test-eval.c:74)
==1553==    by 0x402AB3: main (test-eval.c:116)
==1553==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1553== 
==1553== 
==1553== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1553==  Access not within mapped region at address 0x0
==1553==    at 0x400C02: print_hand (deck.c:7)
==1553==    by 0x4028D3: describe_hand (test-eval.c:74)
==1553==    by 0x402AB3: main (test-eval.c:116)
==1553==  If you believe this happened as a result of a stack
==1553==  overflow in your program's main thread (unlikely but
==1553==  possible), you can try to increase the size of the
==1553==  main thread stack using the --main-stacksize= flag.
==1553==  The main thread stack size used in this run was 8388608.
==1553== 
==1553== HEAP SUMMARY:
==1553==     in use at exit: 896 bytes in 18 blocks
==1553==   total heap usage: 264 allocs, 246 frees, 13,664 bytes allocated
==1553== 
==1553== LEAK SUMMARY:
==1553==    definitely lost: 0 bytes in 0 blocks
==1553==    indirectly lost: 0 bytes in 0 blocks
==1553==      possibly lost: 0 bytes in 0 blocks
==1553==    still reachable: 896 bytes in 18 blocks
==1553==         suppressed: 0 bytes in 0 blocks
==1553== Rerun with --leak-check=full to see details of leaked memory
==1553== 
==1553== For counts of detected and suppressed errors, rerun with: -v
==1553== Use --track-origins=yes to see where uninitialised values come from
==1553== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==1594== Memcheck, a memory error detector
==1594== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1594== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1594== Command: ./test-eval inp.8.txt
==1594== Parent PID: 1593
==1594== 
==1594== Use of uninitialised value of size 8
==1594==    at 0x400C02: print_hand (deck.c:7)
==1594==    by 0x4028D3: describe_hand (test-eval.c:74)
==1594==    by 0x402AD3: main (test-eval.c:119)
==1594== 
==1594== Invalid read of size 8
==1594==    at 0x400C02: print_hand (deck.c:7)
==1594==    by 0x4028D3: describe_hand (test-eval.c:74)
==1594==    by 0x402AD3: main (test-eval.c:119)
==1594==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1594== 
==1594== 
==1594== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1594==  Access not within mapped region at address 0x0
==1594==    at 0x400C02: print_hand (deck.c:7)
==1594==    by 0x4028D3: describe_hand (test-eval.c:74)
==1594==    by 0x402AD3: main (test-eval.c:119)
==1594==  If you believe this happened as a result of a stack
==1594==  overflow in your program's main thread (unlikely but
==1594==  possible), you can try to increase the size of the
==1594==  main thread stack using the --main-stacksize= flag.
==1594==  The main thread stack size used in this run was 8388608.
==1594== 
==1594== HEAP SUMMARY:
==1594==     in use at exit: 896 bytes in 18 blocks
==1594==   total heap usage: 208 allocs, 190 frees, 12,640 bytes allocated
==1594== 
==1594== LEAK SUMMARY:
==1594==    definitely lost: 0 bytes in 0 blocks
==1594==    indirectly lost: 0 bytes in 0 blocks
==1594==      possibly lost: 0 bytes in 0 blocks
==1594==    still reachable: 896 bytes in 18 blocks
==1594==         suppressed: 0 bytes in 0 blocks
==1594== Rerun with --leak-check=full to see details of leaked memory
==1594== 
==1594== For counts of detected and suppressed errors, rerun with: -v
==1594== Use --track-origins=yes to see where uninitialised values come from
==1594== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 10: Trying each type of hand ranking
 Checking the output 
Your file matched the expected output
 - Testcase passed

Overall Grade: C
