Grading at Mon Jul  8 20:24:32 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==801== Memcheck, a memory error detector
==801== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==801== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==801== Command: ./test-eval inp.1.txt
==801== Parent PID: 800
==801== 
==801== Use of uninitialised value of size 8
==801==    at 0x400C02: print_hand (deck.c:7)
==801==    by 0x402864: describe_hand (test-eval.c:74)
==801==    by 0x402A44: main (test-eval.c:116)
==801== 
==801== Conditional jump or move depends on uninitialised value(s)
==801==    at 0x402D10: suit_letter (cards.c:67)
==801==    by 0x402D56: print_card (cards.c:79)
==801==    by 0x400C09: print_hand (deck.c:7)
==801==    by 0x402864: describe_hand (test-eval.c:74)
==801==    by 0x402A44: main (test-eval.c:116)
==801== 
==801== Conditional jump or move depends on uninitialised value(s)
==801==    at 0x402C45: value_letter (cards.c:38)
==801==    by 0x402D65: print_card (cards.c:79)
==801==    by 0x400C09: print_hand (deck.c:7)
==801==    by 0x402864: describe_hand (test-eval.c:74)
==801==    by 0x402A44: main (test-eval.c:116)
==801== 
==801== Conditional jump or move depends on uninitialised value(s)
==801==    at 0x402C57: value_letter (cards.c:40)
==801==    by 0x402D65: print_card (cards.c:79)
==801==    by 0x400C09: print_hand (deck.c:7)
==801==    by 0x402864: describe_hand (test-eval.c:74)
==801==    by 0x402A44: main (test-eval.c:116)
==801== 
==801== Conditional jump or move depends on uninitialised value(s)
==801==    at 0x402C69: value_letter (cards.c:42)
==801==    by 0x402D65: print_card (cards.c:79)
==801==    by 0x400C09: print_hand (deck.c:7)
==801==    by 0x402864: describe_hand (test-eval.c:74)
==801==    by 0x402A44: main (test-eval.c:116)
==801== 
==801== Conditional jump or move depends on uninitialised value(s)
==801==    at 0x402C7B: value_letter (cards.c:44)
==801==    by 0x402D65: print_card (cards.c:79)
==801==    by 0x400C09: print_hand (deck.c:7)
==801==    by 0x402864: describe_hand (test-eval.c:74)
==801==    by 0x402A44: main (test-eval.c:116)
==801== 
==801== Conditional jump or move depends on uninitialised value(s)
==801==    at 0x402C8A: value_letter (cards.c:46)
==801==    by 0x402D65: print_card (cards.c:79)
==801==    by 0x400C09: print_hand (deck.c:7)
==801==    by 0x402864: describe_hand (test-eval.c:74)
==801==    by 0x402A44: main (test-eval.c:116)
==801== 
==801== Conditional jump or move depends on uninitialised value(s)
==801==    at 0x402C99: value_letter (cards.c:48)
==801==    by 0x402D65: print_card (cards.c:79)
==801==    by 0x400C09: print_hand (deck.c:7)
==801==    by 0x402864: describe_hand (test-eval.c:74)
==801==    by 0x402A44: main (test-eval.c:116)
==801== 
==801== Conditional jump or move depends on uninitialised value(s)
==801==    at 0x402CA8: value_letter (cards.c:50)
==801==    by 0x402D65: print_card (cards.c:79)
==801==    by 0x400C09: print_hand (deck.c:7)
==801==    by 0x402864: describe_hand (test-eval.c:74)
==801==    by 0x402A44: main (test-eval.c:116)
==801== 
==801== Conditional jump or move depends on uninitialised value(s)
==801==    at 0x402CB7: value_letter (cards.c:52)
==801==    by 0x402D65: print_card (cards.c:79)
==801==    by 0x400C09: print_hand (deck.c:7)
==801==    by 0x402864: describe_hand (test-eval.c:74)
==801==    by 0x402A44: main (test-eval.c:116)
==801== 
==801== Conditional jump or move depends on uninitialised value(s)
==801==    at 0x402CC6: value_letter (cards.c:54)
==801==    by 0x402D65: print_card (cards.c:79)
==801==    by 0x400C09: print_hand (deck.c:7)
==801==    by 0x402864: describe_hand (test-eval.c:74)
==801==    by 0x402A44: main (test-eval.c:116)
==801== 
==801== Conditional jump or move depends on uninitialised value(s)
==801==    at 0x402CD5: value_letter (cards.c:56)
==801==    by 0x402D65: print_card (cards.c:79)
==801==    by 0x400C09: print_hand (deck.c:7)
==801==    by 0x402864: describe_hand (test-eval.c:74)
==801==    by 0x402A44: main (test-eval.c:116)
==801== 
==801== Conditional jump or move depends on uninitialised value(s)
==801==    at 0x402CE4: value_letter (cards.c:58)
==801==    by 0x402D65: print_card (cards.c:79)
==801==    by 0x400C09: print_hand (deck.c:7)
==801==    by 0x402864: describe_hand (test-eval.c:74)
==801==    by 0x402A44: main (test-eval.c:116)
==801== 
==801== Conditional jump or move depends on uninitialised value(s)
==801==    at 0x402CF3: value_letter (cards.c:60)
==801==    by 0x402D65: print_card (cards.c:79)
==801==    by 0x400C09: print_hand (deck.c:7)
==801==    by 0x402864: describe_hand (test-eval.c:74)
==801==    by 0x402A44: main (test-eval.c:116)
==801== 
==801== Invalid read of size 8
==801==    at 0x400C02: print_hand (deck.c:7)
==801==    by 0x402864: describe_hand (test-eval.c:74)
==801==    by 0x402A44: main (test-eval.c:116)
==801==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==801== 
==801== 
==801== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==801==  Access not within mapped region at address 0x400001102
==801==    at 0x400C02: print_hand (deck.c:7)
==801==    by 0x402864: describe_hand (test-eval.c:74)
==801==    by 0x402A44: main (test-eval.c:116)
==801==  If you believe this happened as a result of a stack
==801==  overflow in your program's main thread (unlikely but
==801==  possible), you can try to increase the size of the
==801==  main thread stack using the --main-stacksize= flag.
==801==  The main thread stack size used in this run was 8388608.
==801== 
==801== HEAP SUMMARY:
==801==     in use at exit: 896 bytes in 18 blocks
==801==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==801== 
==801== LEAK SUMMARY:
==801==    definitely lost: 0 bytes in 0 blocks
==801==    indirectly lost: 0 bytes in 0 blocks
==801==      possibly lost: 0 bytes in 0 blocks
==801==    still reachable: 896 bytes in 18 blocks
==801==         suppressed: 0 bytes in 0 blocks
==801== Rerun with --leak-check=full to see details of leaked memory
==801== 
==801== For counts of detected and suppressed errors, rerun with: -v
==801== Use --track-origins=yes to see where uninitialised values come from
==801== ERROR SUMMARY: 16 errors from 15 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==806== Memcheck, a memory error detector
==806== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==806== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==806== Command: ./test-eval inp.2.txt
==806== Parent PID: 805
==806== 
==806== Use of uninitialised value of size 8
==806==    at 0x400C02: print_hand (deck.c:7)
==806==    by 0x402864: describe_hand (test-eval.c:74)
==806==    by 0x402A44: main (test-eval.c:116)
==806== 
==806== Invalid read of size 8
==806==    at 0x400C02: print_hand (deck.c:7)
==806==    by 0x402864: describe_hand (test-eval.c:74)
==806==    by 0x402A44: main (test-eval.c:116)
==806==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==806== 
==806== 
==806== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==806==  Access not within mapped region at address 0x0
==806==    at 0x400C02: print_hand (deck.c:7)
==806==    by 0x402864: describe_hand (test-eval.c:74)
==806==    by 0x402A44: main (test-eval.c:116)
==806==  If you believe this happened as a result of a stack
==806==  overflow in your program's main thread (unlikely but
==806==  possible), you can try to increase the size of the
==806==  main thread stack using the --main-stacksize= flag.
==806==  The main thread stack size used in this run was 8388608.
==806== 
==806== HEAP SUMMARY:
==806==     in use at exit: 896 bytes in 18 blocks
==806==   total heap usage: 202 allocs, 184 frees, 12,468 bytes allocated
==806== 
==806== LEAK SUMMARY:
==806==    definitely lost: 0 bytes in 0 blocks
==806==    indirectly lost: 0 bytes in 0 blocks
==806==      possibly lost: 0 bytes in 0 blocks
==806==    still reachable: 896 bytes in 18 blocks
==806==         suppressed: 0 bytes in 0 blocks
==806== Rerun with --leak-check=full to see details of leaked memory
==806== 
==806== For counts of detected and suppressed errors, rerun with: -v
==806== Use --track-origins=yes to see where uninitialised values come from
==806== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 4: Trying hands with 3 of a kind
 Checking the output 
Line_88_did_not_match
Line_96_did_not_match
Line_108_did_not_match
Line_116_did_not_match
Line_119_did_not_match
Your file did not match the expected ouput
 - Output did not match, testcase failed
Hand 1:								Hand 1:
--------							--------
Qc Qd Qh 7c 5h 2c 						Qc Qd Qh 7c 5h 2c 
 - No flush							 - No flush
 - The most of a kind is 3 of a kind (at index 0 / value Q)	 - The most of a kind is 3 of a kind (at index 0 / value Q)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: THREE_OF_A_KIND			 - evaluate_hand's ranking: THREE_OF_A_KIND
 - 5 cards used for hand: Qc Qd Qh 7c 5h 			 - 5 cards used for hand: Qc Qd Qh 7c 5h 
Hand 2:								Hand 2:
--------							--------
Jc Jd Jh 7c 5h 2c 						Jc Jd Jh 7c 5h 2c 
 - No flush							 - No flush
 - The most of a kind is 3 of a kind (at index 0 / value J)	 - The most of a kind is 3 of a kind (at index 0 / value J)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: THREE_OF_A_KIND			 - evaluate_hand's ranking: THREE_OF_A_KIND
 - 5 cards used for hand: Jc Jd Jh 7c 5h 			 - 5 cards used for hand: Jc Jd Jh 7c 5h 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Qc Qd Qh 7c 5h 2c 						Qc Qd Qh 7c 5h 2c 
 - No flush							 - No flush
 - The most of a kind is 3 of a kind (at index 0 / value Q)	 - The most of a kind is 3 of a kind (at index 0 / value Q)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: THREE_OF_A_KIND			 - evaluate_hand's ranking: THREE_OF_A_KIND
 - 5 cards used for hand: Qc Qd Qh 7c 5h 			 - 5 cards used for hand: Qc Qd Qh 7c 5h 
Hand 2:								Hand 2:
--------							--------
Qc Qd Qh 8c 5h 2c 						Qc Qd Qh 8c 5h 2c 
 - No flush							 - No flush
 - The most of a kind is 3 of a kind (at index 0 / value Q)	 - The most of a kind is 3 of a kind (at index 0 / value Q)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: THREE_OF_A_KIND			 - evaluate_hand's ranking: THREE_OF_A_KIND
 - 5 cards used for hand: Qc Qd Qh 8c 5h 			 - 5 cards used for hand: Qc Qd Qh 8c 5h 
Comparison : 							Comparison : 
--------------							--------------
Hand 2 wins!							Hand 2 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Qc Qd Qh 7c 5h 2c 						Qc Qd Qh 7c 5h 2c 
 - No flush							 - No flush
 - The most of a kind is 3 of a kind (at index 0 / value Q)	 - The most of a kind is 3 of a kind (at index 0 / value Q)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: THREE_OF_A_KIND			 - evaluate_hand's ranking: THREE_OF_A_KIND
 - 5 cards used for hand: Qc Qd Qh 7c 5h 			 - 5 cards used for hand: Qc Qd Qh 7c 5h 
Hand 2:								Hand 2:
--------							--------
Qc Qd Qh 7c 4h 2c 						Qc Qd Qh 7c 4h 2c 
 - No flush							 - No flush
 - The most of a kind is 3 of a kind (at index 0 / value Q)	 - The most of a kind is 3 of a kind (at index 0 / value Q)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: THREE_OF_A_KIND			 - evaluate_hand's ranking: THREE_OF_A_KIND
 - 5 cards used for hand: Qc Qd Qh 7c 4h 			 - 5 cards used for hand: Qc Qd Qh 7c 4h 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Qc Qd Qh 7c 5h 2c 						Qc Qd Qh 7c 5h 2c 
 - No flush							 - No flush
 - The most of a kind is 3 of a kind (at index 0 / value Q)	 - The most of a kind is 3 of a kind (at index 0 / value Q)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: THREE_OF_A_KIND			 - evaluate_hand's ranking: THREE_OF_A_KIND
 - 5 cards used for hand: Qc Qd Qh 7c 5h 			 - 5 cards used for hand: Qc Qd Qh 7c 5h 
Hand 2:								Hand 2:
--------							--------
Qc Qd Qh 7c 5h 3c 						Qc Qd Qh 7c 5h 3c 
 - No flush							 - No flush
 - The most of a kind is 3 of a kind (at index 0 / value Q)	 - The most of a kind is 3 of a kind (at index 0 / value Q)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: THREE_OF_A_KIND			 - evaluate_hand's ranking: THREE_OF_A_KIND
 - 5 cards used for hand: Qc Qd Qh 7c 5h 			 - 5 cards used for hand: Qc Qd Qh 7c 5h 
Comparison : 							Comparison : 
--------------							--------------
Tie								Tie
============================					============================
Hand 1:								Hand 1:
--------							--------
As Kc Qc Qd Qh 7c 						As Kc Qc Qd Qh 7c 
 - No flush							 - No flush
 - The most of a kind is 3 of a kind (at index 2 / value Q)	 - The most of a kind is 3 of a kind (at index 2 / value Q)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: THREE_OF_A_KIND			 - evaluate_hand's ranking: THREE_OF_A_KIND
 - 5 cards used for hand: Qc Qd Qh As Kc 		      |	 - 5 cards used for hand: Qc Qd Qh Qh 7c 
Hand 2:								Hand 2:
--------							--------
As Qc Jc Jd Jh 7c 						As Qc Jc Jd Jh 7c 
 - No flush							 - No flush
 - The most of a kind is 3 of a kind (at index 2 / value J)	 - The most of a kind is 3 of a kind (at index 2 / value J)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: THREE_OF_A_KIND			 - evaluate_hand's ranking: THREE_OF_A_KIND
 - 5 cards used for hand: Jc Jd Jh As Qc 		      |	 - 5 cards used for hand: Jc Jd Jh Jh 7c 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
As Kc Jc Jd Jh 7c 						As Kc Jc Jd Jh 7c 
 - No flush							 - No flush
 - The most of a kind is 3 of a kind (at index 2 / value J)	 - The most of a kind is 3 of a kind (at index 2 / value J)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: THREE_OF_A_KIND			 - evaluate_hand's ranking: THREE_OF_A_KIND
 - 5 cards used for hand: Jc Jd Jh As Kc 		      |	 - 5 cards used for hand: Jc Jd Jh Jh 7c 
Hand 2:								Hand 2:
--------							--------
As Qc Jc Jd Jh 7c 						As Qc Jc Jd Jh 7c 
 - No flush							 - No flush
 - The most of a kind is 3 of a kind (at index 2 / value J)	 - The most of a kind is 3 of a kind (at index 2 / value J)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: THREE_OF_A_KIND			 - evaluate_hand's ranking: THREE_OF_A_KIND
 - 5 cards used for hand: Jc Jd Jh As Qc 		      |	 - 5 cards used for hand: Jc Jd Jh Jh 7c 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!						      |	Tie
============================					============================
Testcase 5: Trying hands with straights
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 8: Trying hands with 4 of a kind
 Checking the output 
Line_56_did_not_match
Line_76_did_not_match
Your file did not match the expected ouput
 - Output did not match, testcase failed
Hand 1:								Hand 1:
--------							--------
Kc Kd Kh Ks 8c 7d 						Kc Kd Kh Ks 8c 7d 
 - No flush							 - No flush
 - The most of a kind is 4 of a kind (at index 0 / value K)	 - The most of a kind is 4 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: FOUR_OF_A_KIND			 - evaluate_hand's ranking: FOUR_OF_A_KIND
 - 5 cards used for hand: Kc Kd Kh Ks 8c 			 - 5 cards used for hand: Kc Kd Kh Ks 8c 
Hand 2:								Hand 2:
--------							--------
Kc Kd Kh Ks 8c 6d 						Kc Kd Kh Ks 8c 6d 
 - No flush							 - No flush
 - The most of a kind is 4 of a kind (at index 0 / value K)	 - The most of a kind is 4 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: FOUR_OF_A_KIND			 - evaluate_hand's ranking: FOUR_OF_A_KIND
 - 5 cards used for hand: Kc Kd Kh Ks 8c 			 - 5 cards used for hand: Kc Kd Kh Ks 8c 
Comparison : 							Comparison : 
--------------							--------------
Tie								Tie
============================					============================
Hand 1:								Hand 1:
--------							--------
Kc Kd Kh Ks 8c 7d 						Kc Kd Kh Ks 8c 7d 
 - No flush							 - No flush
 - The most of a kind is 4 of a kind (at index 0 / value K)	 - The most of a kind is 4 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: FOUR_OF_A_KIND			 - evaluate_hand's ranking: FOUR_OF_A_KIND
 - 5 cards used for hand: Kc Kd Kh Ks 8c 			 - 5 cards used for hand: Kc Kd Kh Ks 8c 
Hand 2:								Hand 2:
--------							--------
Kc Kd Kh Ks 9d 8c 						Kc Kd Kh Ks 9d 8c 
 - No flush							 - No flush
 - The most of a kind is 4 of a kind (at index 0 / value K)	 - The most of a kind is 4 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: FOUR_OF_A_KIND			 - evaluate_hand's ranking: FOUR_OF_A_KIND
 - 5 cards used for hand: Kc Kd Kh Ks 9d 			 - 5 cards used for hand: Kc Kd Kh Ks 9d 
Comparison : 							Comparison : 
--------------							--------------
Hand 2 wins!							Hand 2 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Kc Kd Kh Ks 8c 7d 						Kc Kd Kh Ks 8c 7d 
 - No flush							 - No flush
 - The most of a kind is 4 of a kind (at index 0 / value K)	 - The most of a kind is 4 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: FOUR_OF_A_KIND			 - evaluate_hand's ranking: FOUR_OF_A_KIND
 - 5 cards used for hand: Kc Kd Kh Ks 8c 			 - 5 cards used for hand: Kc Kd Kh Ks 8c 
Hand 2:								Hand 2:
--------							--------
As Kc Kd Kh Ks 4d 						As Kc Kd Kh Ks 4d 
 - No flush							 - No flush
 - The most of a kind is 4 of a kind (at index 1 / value K)	 - The most of a kind is 4 of a kind (at index 1 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: FOUR_OF_A_KIND			 - evaluate_hand's ranking: FOUR_OF_A_KIND
 - 5 cards used for hand: Kc Kd Kh Ks As 		      |	 - 5 cards used for hand: Kc Kd Kh Ks Ks 
Comparison : 							Comparison : 
--------------							--------------
Hand 2 wins!							Hand 2 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Kc Kd Kh Ks 8c 7d 						Kc Kd Kh Ks 8c 7d 
 - No flush							 - No flush
 - The most of a kind is 4 of a kind (at index 0 / value K)	 - The most of a kind is 4 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: FOUR_OF_A_KIND			 - evaluate_hand's ranking: FOUR_OF_A_KIND
 - 5 cards used for hand: Kc Kd Kh Ks 8c 			 - 5 cards used for hand: Kc Kd Kh Ks 8c 
Hand 2:								Hand 2:
--------							--------
Ac As Kc Kd Kh Ks 						Ac As Kc Kd Kh Ks 
 - No flush							 - No flush
 - The most of a kind is 4 of a kind (at index 2 / value K)	 - The most of a kind is 4 of a kind (at index 2 / value K)
 - Secondary pair at index 0 (value A)				 - Secondary pair at index 0 (value A)
 - evaluate_hand's ranking: FOUR_OF_A_KIND			 - evaluate_hand's ranking: FOUR_OF_A_KIND
 - 5 cards used for hand: Kc Kd Kh Ks Ac 		      |	 - 5 cards used for hand: Kc Kd Kh Ks Ks 
Comparison : 							Comparison : 
--------------							--------------
Hand 2 wins!							Hand 2 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Kc Kd Kh Ks 8c 7d 						Kc Kd Kh Ks 8c 7d 
 - No flush							 - No flush
 - The most of a kind is 4 of a kind (at index 0 / value K)	 - The most of a kind is 4 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: FOUR_OF_A_KIND			 - evaluate_hand's ranking: FOUR_OF_A_KIND
 - 5 cards used for hand: Kc Kd Kh Ks 8c 			 - 5 cards used for hand: Kc Kd Kh Ks 8c 
Hand 2:								Hand 2:
--------							--------
Qc Qd Qh Qs 8c 6d 						Qc Qd Qh Qs 8c 6d 
 - No flush							 - No flush
 - The most of a kind is 4 of a kind (at index 0 / value Q)	 - The most of a kind is 4 of a kind (at index 0 / value Q)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: FOUR_OF_A_KIND			 - evaluate_hand's ranking: FOUR_OF_A_KIND
 - 5 cards used for hand: Qc Qd Qh Qs 8c 			 - 5 cards used for hand: Qc Qd Qh Qs 8c 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Kc Kd Kh Ks 8c 7d 						Kc Kd Kh Ks 8c 7d 
 - No flush							 - No flush
 - The most of a kind is 4 of a kind (at index 0 / value K)	 - The most of a kind is 4 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: FOUR_OF_A_KIND			 - evaluate_hand's ranking: FOUR_OF_A_KIND
 - 5 cards used for hand: Kc Kd Kh Ks 8c 			 - 5 cards used for hand: Kc Kd Kh Ks 8c 
Hand 2:								Hand 2:
--------							--------
Qc Qd Qh Qs 9c 6d 						Qc Qd Qh Qs 9c 6d 
 - No flush							 - No flush
 - The most of a kind is 4 of a kind (at index 0 / value Q)	 - The most of a kind is 4 of a kind (at index 0 / value Q)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: FOUR_OF_A_KIND			 - evaluate_hand's ranking: FOUR_OF_A_KIND
 - 5 cards used for hand: Qc Qd Qh Qs 9c 			 - 5 cards used for hand: Qc Qd Qh Qs 9c 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Testcase 9: Trying hands with straight flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==897== Memcheck, a memory error detector
==897== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==897== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==897== Command: ./test-eval inp.10.txt
==897== Parent PID: 896
==897== 
==897== Use of uninitialised value of size 8
==897==    at 0x400C02: print_hand (deck.c:7)
==897==    by 0x402864: describe_hand (test-eval.c:74)
==897==    by 0x402A64: main (test-eval.c:119)
==897== 
==897== Conditional jump or move depends on uninitialised value(s)
==897==    at 0x402D10: suit_letter (cards.c:67)
==897==    by 0x402D56: print_card (cards.c:79)
==897==    by 0x400C09: print_hand (deck.c:7)
==897==    by 0x402864: describe_hand (test-eval.c:74)
==897==    by 0x402A64: main (test-eval.c:119)
==897== 
==897== Conditional jump or move depends on uninitialised value(s)
==897==    at 0x402C45: value_letter (cards.c:38)
==897==    by 0x402D65: print_card (cards.c:79)
==897==    by 0x400C09: print_hand (deck.c:7)
==897==    by 0x402864: describe_hand (test-eval.c:74)
==897==    by 0x402A64: main (test-eval.c:119)
==897== 
==897== Conditional jump or move depends on uninitialised value(s)
==897==    at 0x402C57: value_letter (cards.c:40)
==897==    by 0x402D65: print_card (cards.c:79)
==897==    by 0x400C09: print_hand (deck.c:7)
==897==    by 0x402864: describe_hand (test-eval.c:74)
==897==    by 0x402A64: main (test-eval.c:119)
==897== 
==897== Conditional jump or move depends on uninitialised value(s)
==897==    at 0x402C69: value_letter (cards.c:42)
==897==    by 0x402D65: print_card (cards.c:79)
==897==    by 0x400C09: print_hand (deck.c:7)
==897==    by 0x402864: describe_hand (test-eval.c:74)
==897==    by 0x402A64: main (test-eval.c:119)
==897== 
==897== Conditional jump or move depends on uninitialised value(s)
==897==    at 0x402C7B: value_letter (cards.c:44)
==897==    by 0x402D65: print_card (cards.c:79)
==897==    by 0x400C09: print_hand (deck.c:7)
==897==    by 0x402864: describe_hand (test-eval.c:74)
==897==    by 0x402A64: main (test-eval.c:119)
==897== 
==897== Conditional jump or move depends on uninitialised value(s)
==897==    at 0x402C8A: value_letter (cards.c:46)
==897==    by 0x402D65: print_card (cards.c:79)
==897==    by 0x400C09: print_hand (deck.c:7)
==897==    by 0x402864: describe_hand (test-eval.c:74)
==897==    by 0x402A64: main (test-eval.c:119)
==897== 
==897== Conditional jump or move depends on uninitialised value(s)
==897==    at 0x402C99: value_letter (cards.c:48)
==897==    by 0x402D65: print_card (cards.c:79)
==897==    by 0x400C09: print_hand (deck.c:7)
==897==    by 0x402864: describe_hand (test-eval.c:74)
==897==    by 0x402A64: main (test-eval.c:119)
==897== 
==897== Conditional jump or move depends on uninitialised value(s)
==897==    at 0x402CA8: value_letter (cards.c:50)
==897==    by 0x402D65: print_card (cards.c:79)
==897==    by 0x400C09: print_hand (deck.c:7)
==897==    by 0x402864: describe_hand (test-eval.c:74)
==897==    by 0x402A64: main (test-eval.c:119)
==897== 
==897== Conditional jump or move depends on uninitialised value(s)
==897==    at 0x402CB7: value_letter (cards.c:52)
==897==    by 0x402D65: print_card (cards.c:79)
==897==    by 0x400C09: print_hand (deck.c:7)
==897==    by 0x402864: describe_hand (test-eval.c:74)
==897==    by 0x402A64: main (test-eval.c:119)
==897== 
==897== Conditional jump or move depends on uninitialised value(s)
==897==    at 0x402CC6: value_letter (cards.c:54)
==897==    by 0x402D65: print_card (cards.c:79)
==897==    by 0x400C09: print_hand (deck.c:7)
==897==    by 0x402864: describe_hand (test-eval.c:74)
==897==    by 0x402A64: main (test-eval.c:119)
==897== 
==897== Conditional jump or move depends on uninitialised value(s)
==897==    at 0x402CD5: value_letter (cards.c:56)
==897==    by 0x402D65: print_card (cards.c:79)
==897==    by 0x400C09: print_hand (deck.c:7)
==897==    by 0x402864: describe_hand (test-eval.c:74)
==897==    by 0x402A64: main (test-eval.c:119)
==897== 
==897== Conditional jump or move depends on uninitialised value(s)
==897==    at 0x402CE4: value_letter (cards.c:58)
==897==    by 0x402D65: print_card (cards.c:79)
==897==    by 0x400C09: print_hand (deck.c:7)
==897==    by 0x402864: describe_hand (test-eval.c:74)
==897==    by 0x402A64: main (test-eval.c:119)
==897== 
==897== Conditional jump or move depends on uninitialised value(s)
==897==    at 0x402CF3: value_letter (cards.c:60)
==897==    by 0x402D65: print_card (cards.c:79)
==897==    by 0x400C09: print_hand (deck.c:7)
==897==    by 0x402864: describe_hand (test-eval.c:74)
==897==    by 0x402A64: main (test-eval.c:119)
==897== 
==897== Invalid read of size 8
==897==    at 0x400C02: print_hand (deck.c:7)
==897==    by 0x402864: describe_hand (test-eval.c:74)
==897==    by 0x402A64: main (test-eval.c:119)
==897==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==897== 
==897== 
==897== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==897==  Access not within mapped region at address 0x400001102
==897==    at 0x400C02: print_hand (deck.c:7)
==897==    by 0x402864: describe_hand (test-eval.c:74)
==897==    by 0x402A64: main (test-eval.c:119)
==897==  If you believe this happened as a result of a stack
==897==  overflow in your program's main thread (unlikely but
==897==  possible), you can try to increase the size of the
==897==  main thread stack using the --main-stacksize= flag.
==897==  The main thread stack size used in this run was 8388608.
==897== 
==897== HEAP SUMMARY:
==897==     in use at exit: 896 bytes in 18 blocks
==897==   total heap usage: 154 allocs, 136 frees, 11,708 bytes allocated
==897== 
==897== LEAK SUMMARY:
==897==    definitely lost: 0 bytes in 0 blocks
==897==    indirectly lost: 0 bytes in 0 blocks
==897==      possibly lost: 0 bytes in 0 blocks
==897==    still reachable: 896 bytes in 18 blocks
==897==         suppressed: 0 bytes in 0 blocks
==897== Rerun with --leak-check=full to see details of leaked memory
==897== 
==897== For counts of detected and suppressed errors, rerun with: -v
==897== Use --track-origins=yes to see where uninitialised values come from
==897== ERROR SUMMARY: 16 errors from 15 contexts (suppressed: 0 from 0)

Overall Grade: F
